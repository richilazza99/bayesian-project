
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace beta_clus_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 84> locations_array__ = 
{" (found before start of program)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 69, column 4 to column 25)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 70, column 4 to column 23)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 71, column 4 to column 30)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 75, column 4 to column 51)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 78, column 4 to column 34)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 81, column 4 to column 42)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 90, column 4 to column 42)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 91, column 4 to column 38)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 92, column 4 to column 38)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 95, column 4 to column 39)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 96, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 96, column 4 to column 18)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 97, column 4 to column 35)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 98, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 98, column 13 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 98, column 4 to column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 99, column 4 to column 47)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 101, column 4 to column 49)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 104, column 8 to column 75)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 103, column 4 to line 104, column 75)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 108, column 8 to column 58)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 107, column 4 to line 109, column 5)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 106, column 4 to line 109, column 5)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 111, column 8 to column 26)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 113, column 8 to column 116)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 110, column 18 to line 114, column 5)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 110, column 4 to line 114, column 5)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 4, column 4 to column 19)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 5, column 4 to column 19)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 6, column 4 to column 19)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 7, column 4 to column 19)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 9, column 11 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 9, column 4 to column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 10, column 11 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 10, column 15 to column 18)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 10, column 4 to column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 13, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 13, column 13 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 13, column 4 to column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 16, column 11 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 16, column 4 to column 25)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 17, column 11 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 17, column 15 to column 18)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 17, column 4 to column 28)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 20, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 20, column 4 to column 21)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 23, column 4 to column 26)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 24, column 4 to column 26)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 27, column 4 to column 25)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 28, column 4 to column 25)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 31, column 4 to column 27)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 32, column 4 to column 27)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 35, column 4 to column 28)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 36, column 4 to column 27)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 39, column 4 to column 23)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 40, column 4 to column 23)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 42, column 10 to column 11)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 42, column 4 to column 13)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 47, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 47, column 4 to column 21)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 49, column 8 to column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 48, column 4 to line 49, column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 51, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 51, column 13 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 51, column 4 to column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 52, column 4 to column 32)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 54, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 54, column 4 to column 21)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 56, column 8 to column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 55, column 4 to line 56, column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 58, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 58, column 13 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 58, column 4 to column 22)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 59, column 4 to column 32)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 61, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 61, column 13 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 61, column 4 to column 18)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 62, column 4 to column 42)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 75, column 28 to column 29)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 78, column 11 to column 12)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 78, column 13 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 81, column 11 to column 14)",
 " (in '/home/anna-ubuntu/bayesian-project/beta_clus.stan', line 81, column 15 to column 16)"};




class beta_clus_model final : public model_base_crtp<beta_clus_model> {

 private:
  int I;
  int T;
  int P;
  int H;
  Eigen::Matrix<double, -1, 1> y_data__;
  Eigen::Matrix<double, -1, -1> X_data__;
  Eigen::Matrix<double, -1, -1> W_raw_data__;
  Eigen::Matrix<double, -1, 1> mu_0_data__;
  Eigen::Matrix<double, -1, -1> Sigma_0_data__;
  Eigen::Matrix<double, -1, 1> mu_w_1_data__;
  double a_alpha;
  double b_alpha;
  double a_tau2;
  double b_tau2;
  double a_sigma2;
  double b_sigma2;
  double alpha_rho;
  double beta_rho;
  double a_xi;
  double b_xi;
  std::vector<int> s;
  Eigen::Matrix<double, -1, 1> ones_T_data__;
  Eigen::Matrix<double, -1, -1> eye_T_data__;
  Eigen::Matrix<double, -1, 1> ones_I_data__;
  Eigen::Matrix<double, -1, -1> eye_I_data__;
  Eigen::Matrix<double, -1, -1> W_data__;
  int betas_clus_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> W_raw{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mu_0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Sigma_0{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mu_w_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ones_T{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> eye_T{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ones_I{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> eye_I{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> W{nullptr, 0, 0};
 
 public:
  ~beta_clus_model() { }
  
  inline std::string model_name() const final { return "beta_clus_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  beta_clus_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "beta_clus_model_namespace::beta_clus_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 28;
      context__.validate_dims("data initialization","I","int",
           std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      
      
      current_statement__ = 28;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "I", I, 1);
      current_statement__ = 29;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 29;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 30;
      context__.validate_dims("data initialization","P","int",
           std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      
      
      current_statement__ = 30;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "P", P, 1);
      current_statement__ = 31;
      context__.validate_dims("data initialization","H","int",
           std::vector<size_t>{});
      H = std::numeric_limits<int>::min();
      
      
      current_statement__ = 31;
      H = context__.vals_i("H")[(1 - 1)];
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "H", H, 1);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("y", "I * T", (I * T));
      current_statement__ = 33;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>((I * T))});
      y_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant((I * T),
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_data__.data(), 
        (I * T));
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 33;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= (I * T); ++sym1__) {
          current_statement__ = 33;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 33;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("X", "I * T", (I * T));
      current_statement__ = 35;
      stan::math::validate_non_negative_index("X", "P + 1", (P + 1));
      current_statement__ = 36;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>((I * T)),
            static_cast<size_t>((P + 1))});
      X_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant((I * T), (P + 1),
          std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X_data__.data(), 
        (I * T), (P + 1));
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 36;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 36;
          for (int sym2__ = 1; sym2__ <= (I * T); ++sym2__) {
            current_statement__ = 36;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 36;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 37;
      stan::math::validate_non_negative_index("W_raw", "I", I);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("W_raw", "I", I);
      current_statement__ = 39;
      context__.validate_dims("data initialization","W_raw","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(I)});
      W_raw_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&W_raw) Eigen::Map<Eigen::Matrix<double, -1, -1>>(W_raw_data__.data(), I, I);
        
      
      {
        std::vector<local_scalar_t__> W_raw_flat__;
        current_statement__ = 39;
        W_raw_flat__ = context__.vals_r("W_raw");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 39;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 39;
            stan::model::assign(W_raw, W_raw_flat__[(pos__ - 1)],
              "assigning variable W_raw", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 39;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 40;
      stan::math::validate_non_negative_index("mu_0", "P + 1", (P + 1));
      current_statement__ = 41;
      context__.validate_dims("data initialization","mu_0","double",
           std::vector<size_t>{static_cast<size_t>((P + 1))});
      mu_0_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant((P + 1),
          std::numeric_limits<double>::quiet_NaN());
      new (&mu_0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mu_0_data__.data(), 
        (P + 1));
      
      {
        std::vector<local_scalar_t__> mu_0_flat__;
        current_statement__ = 41;
        mu_0_flat__ = context__.vals_r("mu_0");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 41;
          stan::model::assign(mu_0, mu_0_flat__[(pos__ - 1)],
            "assigning variable mu_0", stan::model::index_uni(sym1__));
          current_statement__ = 41;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 42;
      stan::math::validate_non_negative_index("Sigma_0", "P + 1", (P + 1));
      current_statement__ = 43;
      stan::math::validate_non_negative_index("Sigma_0", "P + 1", (P + 1));
      current_statement__ = 44;
      context__.validate_dims("data initialization","Sigma_0","double",
           std::vector<size_t>{static_cast<size_t>((P + 1)),
            static_cast<size_t>((P + 1))});
      Sigma_0_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant((P + 1), (P + 1),
          std::numeric_limits<double>::quiet_NaN());
      new (&Sigma_0) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Sigma_0_data__.data(), 
        (P + 1), (P + 1));
      
      {
        std::vector<local_scalar_t__> Sigma_0_flat__;
        current_statement__ = 44;
        Sigma_0_flat__ = context__.vals_r("Sigma_0");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 44;
          for (int sym2__ = 1; sym2__ <= (P + 1); ++sym2__) {
            current_statement__ = 44;
            stan::model::assign(Sigma_0, Sigma_0_flat__[(pos__ - 1)],
              "assigning variable Sigma_0", stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
            current_statement__ = 44;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 45;
      stan::math::validate_non_negative_index("mu_w_1", "I", I);
      current_statement__ = 46;
      context__.validate_dims("data initialization","mu_w_1","double",
           std::vector<size_t>{static_cast<size_t>(I)});
      mu_w_1_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(I,
          std::numeric_limits<double>::quiet_NaN());
      new (&mu_w_1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mu_w_1_data__.data(), I);
        
      
      {
        std::vector<local_scalar_t__> mu_w_1_flat__;
        current_statement__ = 46;
        mu_w_1_flat__ = context__.vals_r("mu_w_1");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 46;
          stan::model::assign(mu_w_1, mu_w_1_flat__[(pos__ - 1)],
            "assigning variable mu_w_1", stan::model::index_uni(sym1__));
          current_statement__ = 46;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 47;
      context__.validate_dims("data initialization","a_alpha","double",
           std::vector<size_t>{});
      a_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 47;
      a_alpha = context__.vals_r("a_alpha")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "a_alpha", a_alpha, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization","b_alpha","double",
           std::vector<size_t>{});
      b_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 48;
      b_alpha = context__.vals_r("b_alpha")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "b_alpha", b_alpha, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization","a_tau2","double",
           std::vector<size_t>{});
      a_tau2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 49;
      a_tau2 = context__.vals_r("a_tau2")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "a_tau2", a_tau2, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization","b_tau2","double",
           std::vector<size_t>{});
      b_tau2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 50;
      b_tau2 = context__.vals_r("b_tau2")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "b_tau2", b_tau2, 0);
      current_statement__ = 51;
      context__.validate_dims("data initialization","a_sigma2","double",
           std::vector<size_t>{});
      a_sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 51;
      a_sigma2 = context__.vals_r("a_sigma2")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "a_sigma2", a_sigma2, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization","b_sigma2","double",
           std::vector<size_t>{});
      b_sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 52;
      b_sigma2 = context__.vals_r("b_sigma2")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "b_sigma2", b_sigma2, 0);
      current_statement__ = 53;
      context__.validate_dims("data initialization","alpha_rho","double",
           std::vector<size_t>{});
      alpha_rho = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 53;
      alpha_rho = context__.vals_r("alpha_rho")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "alpha_rho", alpha_rho,
                                            0);
      current_statement__ = 54;
      context__.validate_dims("data initialization","beta_rho","double",
           std::vector<size_t>{});
      beta_rho = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 54;
      beta_rho = context__.vals_r("beta_rho")[(1 - 1)];
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "beta_rho", beta_rho, 0);
      current_statement__ = 55;
      context__.validate_dims("data initialization","a_xi","double",
           std::vector<size_t>{});
      a_xi = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 55;
      a_xi = context__.vals_r("a_xi")[(1 - 1)];
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "a_xi", a_xi, 0);
      current_statement__ = 56;
      context__.validate_dims("data initialization","b_xi","double",
           std::vector<size_t>{});
      b_xi = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 56;
      b_xi = context__.vals_r("b_xi")[(1 - 1)];
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "b_xi", b_xi, 0);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("s", "I", I);
      current_statement__ = 58;
      context__.validate_dims("data initialization","s","int",
           std::vector<size_t>{static_cast<size_t>(I)});
      s = std::vector<int>(I, std::numeric_limits<int>::min());
      
      
      current_statement__ = 58;
      s = context__.vals_i("s");
      current_statement__ = 59;
      stan::math::validate_non_negative_index("ones_T", "T", T);
      current_statement__ = 60;
      ones_T_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      new (&ones_T) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ones_T_data__.data(), T);
        
      
      current_statement__ = 62;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 61;
        stan::model::assign(ones_T, 1,
          "assigning variable ones_T", stan::model::index_uni(t));
      }
      current_statement__ = 63;
      stan::math::validate_non_negative_index("eye_T", "T", T);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("eye_T", "T", T);
      current_statement__ = 65;
      eye_T_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(T, T,
          std::numeric_limits<double>::quiet_NaN());
      new (&eye_T) Eigen::Map<Eigen::Matrix<double, -1, -1>>(eye_T_data__.data(), T, T);
        
      
      current_statement__ = 66;
      stan::model::assign(eye_T, stan::math::diag_matrix(ones_T),
        "assigning variable eye_T");
      current_statement__ = 67;
      stan::math::validate_non_negative_index("ones_I", "I", I);
      current_statement__ = 68;
      ones_I_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(I,
          std::numeric_limits<double>::quiet_NaN());
      new (&ones_I) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ones_I_data__.data(), I);
        
      
      current_statement__ = 70;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 69;
        stan::model::assign(ones_I, 1,
          "assigning variable ones_I", stan::model::index_uni(i));
      }
      current_statement__ = 71;
      stan::math::validate_non_negative_index("eye_I", "I", I);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("eye_I", "I", I);
      current_statement__ = 73;
      eye_I_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&eye_I) Eigen::Map<Eigen::Matrix<double, -1, -1>>(eye_I_data__.data(), I, I);
        
      
      current_statement__ = 74;
      stan::model::assign(eye_I, stan::math::diag_matrix(ones_I),
        "assigning variable eye_I");
      current_statement__ = 75;
      stan::math::validate_non_negative_index("W", "I", I);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("W", "I", I);
      current_statement__ = 77;
      W_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&W) Eigen::Map<Eigen::Matrix<double, -1, -1>>(W_data__.data(), I, I);
        
      
      current_statement__ = 78;
      stan::model::assign(W,
        stan::math::subtract(
          stan::math::diag_matrix(stan::math::multiply(W_raw, ones_I)),
          W_raw), "assigning variable W");
      current_statement__ = 79;
      stan::math::validate_non_negative_index("xis_constructors", "I", I);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("ws", "T", T);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("ws", "I", I);
      current_statement__ = 82;
      betas_clus_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 82;
      betas_clus_1dim__ = (P + 1);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("betas_clus", "P + 1",
                                              betas_clus_1dim__);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("betas_clus", "H", H);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + I + (T * I) + (betas_clus_1dim__ * H);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "beta_clus_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 1;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ tau2 = DUMMY_VAR__;
      current_statement__ = 2;
      tau2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 3;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> xis_constructors =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__);
      current_statement__ = 4;
      xis_constructors = in__.template read_constrain_lub<
                           Eigen::Matrix<local_scalar_t__, -1, 1>, 
                           jacobian__>(0, 1, lp__, I);
      Eigen::Matrix<local_scalar_t__, -1, -1> ws =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T, I, DUMMY_VAR__);
      current_statement__ = 5;
      ws = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(T, I);
      Eigen::Matrix<local_scalar_t__, -1, -1> betas_clus =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(betas_clus_1dim__,
           H, DUMMY_VAR__);
      current_statement__ = 6;
      betas_clus = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, -1>>(
                     betas_clus_1dim__, H);
      {
        current_statement__ = 7;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma2, a_sigma2, b_sigma2));
        current_statement__ = 8;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(tau2, a_tau2, b_tau2));
        current_statement__ = 9;
        lp_accum__.add(
          stan::math::beta_lpdf<propto__>(rho, alpha_rho, beta_rho));
        current_statement__ = 10;
        lp_accum__.add(
          stan::math::beta_lpdf<propto__>(xis_constructors, a_xi, b_xi));
        current_statement__ = 11;
        stan::math::validate_non_negative_index("xis", "I", I);
        Eigen::Matrix<local_scalar_t__, -1, 1> xis =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__);
        current_statement__ = 13;
        stan::model::assign(xis,
          stan::math::subtract(stan::math::multiply(2, xis_constructors), 1),
          "assigning variable xis");
        current_statement__ = 14;
        stan::math::validate_non_negative_index("inv_Q", "I", I);
        current_statement__ = 15;
        stan::math::validate_non_negative_index("inv_Q", "I", I);
        Eigen::Matrix<local_scalar_t__, -1, -1> inv_Q =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(I, I,
             DUMMY_VAR__);
        current_statement__ = 17;
        stan::model::assign(inv_Q,
          stan::math::inverse_spd(
            stan::math::add(stan::math::multiply(rho, W),
              stan::math::multiply((1 - rho), eye_I))),
          "assigning variable inv_Q");
        current_statement__ = 18;
        lp_accum__.add(
          stan::math::multi_normal_lpdf<propto__>(
            stan::model::rvalue(ws, "ws",
              stan::model::index_uni(1), stan::model::index_min_max(1, I)),
            mu_w_1, stan::math::multiply(tau2, inv_Q)));
        current_statement__ = 20;
        for (int t = 2; t <= T; ++t) {
          current_statement__ = 19;
          lp_accum__.add(
            stan::math::multi_normal_lpdf<propto__>(
              stan::model::rvalue(ws, "ws",
                stan::model::index_uni(t), stan::model::index_min_max(1, I)),
              stan::math::multiply(
                stan::model::rvalue(ws, "ws",
                  stan::model::index_uni((t - 1)),
                    stan::model::index_min_max(1, I)),
                stan::math::diag_matrix(xis)),
              stan::math::multiply(tau2, inv_Q)));
        }
        current_statement__ = 23;
        for (int h = 1; h <= H; ++h) {
          current_statement__ = 21;
          lp_accum__.add(
            stan::math::multi_normal_lpdf<propto__>(
              stan::model::rvalue(betas_clus, "betas_clus",
                stan::model::index_min_max(1, (P + 1)),
                  stan::model::index_uni(h)), mu_0, Sigma_0));
        }
        current_statement__ = 27;
        for (int i = 1; i <= I; ++i) {
          int clus_i = std::numeric_limits<int>::min();
          current_statement__ = 24;
          clus_i = (stan::model::rvalue(s, "s", stan::model::index_uni(i)) +
                     1);
          current_statement__ = 25;
          lp_accum__.add(
            stan::math::multi_normal_lpdf<propto__>(
              stan::model::rvalue(y, "y",
                stan::model::index_min_max(((T * (i - 1)) + 1), (i * T))),
              stan::math::add(
                stan::math::multiply(
                  stan::model::rvalue(X, "X",
                    stan::model::index_min_max(((T * (i - 1)) + 1), (i * T)),
                      stan::model::index_min_max(1, (P + 1))),
                  stan::model::rvalue(betas_clus, "betas_clus",
                    stan::model::index_min_max(1, (P + 1)),
                      stan::model::index_uni(clus_i))),
                stan::model::rvalue(ws, "ws",
                  stan::model::index_min_max(1, T), stan::model::index_uni(i))),
              stan::math::multiply(sigma2, eye_T)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "beta_clus_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double sigma2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double tau2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      tau2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<double, -1, 1> xis_constructors =
         Eigen::Matrix<double, -1, 1>::Constant(I,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      xis_constructors = in__.template read_constrain_lub<
                           Eigen::Matrix<local_scalar_t__, -1, 1>, 
                           jacobian__>(0, 1, lp__, I);
      Eigen::Matrix<double, -1, -1> ws =
         Eigen::Matrix<double, -1, -1>::Constant(T, I,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      ws = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(T, I);
      Eigen::Matrix<double, -1, -1> betas_clus =
         Eigen::Matrix<double, -1, -1>::Constant(betas_clus_1dim__, H,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      betas_clus = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, -1>>(
                     betas_clus_1dim__, H);
      out__.write(sigma2);
      out__.write(tau2);
      out__.write(rho);
      out__.write(xis_constructors);
      out__.write(ws);
      out__.write(betas_clus);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      sigma2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2);
      local_scalar_t__ tau2 = DUMMY_VAR__;
      tau2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau2);
      local_scalar_t__ rho = DUMMY_VAR__;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, rho);
      Eigen::Matrix<local_scalar_t__, -1, 1> xis_constructors =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        stan::model::assign(xis_constructors, in__.read<local_scalar_t__>(),
          "assigning variable xis_constructors", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, xis_constructors);
      Eigen::Matrix<local_scalar_t__, -1, -1> ws =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T, I, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          stan::model::assign(ws, in__.read<local_scalar_t__>(),
            "assigning variable ws", stan::model::index_uni(sym2__),
                                       stan::model::index_uni(sym1__));
        }
      }
      out__.write(ws);
      Eigen::Matrix<local_scalar_t__, -1, -1> betas_clus =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(betas_clus_1dim__,
           H, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= betas_clus_1dim__; ++sym2__) {
          stan::model::assign(betas_clus, in__.read<local_scalar_t__>(),
            "assigning variable betas_clus", stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
        }
      }
      out__.write(betas_clus);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"sigma2", "tau2", "rho",
      "xis_constructors", "ws", "betas_clus"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(betas_clus_1dim__),
                          static_cast<size_t>(H)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "tau2");
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xis_constructors" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= betas_clus_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas_clus" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "tau2");
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xis_constructors" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= betas_clus_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas_clus" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xis_constructors\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"parameters\"},{\"name\":\"betas_clus\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(betas_clus_1dim__) + ",\"cols\":" + std::to_string(H) + "},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xis_constructors\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"parameters\"},{\"name\":\"betas_clus\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(betas_clus_1dim__) + ",\"cols\":" + std::to_string(H) + "},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + I) + (T * I)) + (betas_clus_1dim__ * H));
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + I) + (T * I)) + (betas_clus_1dim__ * H));
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 6> names__{"sigma2", "tau2", "rho",
      "xis_constructors", "ws", "betas_clus"};
      const std::array<Eigen::Index, 6> constrain_param_sizes__{1, 1, 
       1, I, (T * I), (betas_clus_1dim__ * H)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = beta_clus_model_namespace::beta_clus_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return beta_clus_model_namespace::profiles__;
}

#endif


