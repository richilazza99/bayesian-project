
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace bayesian_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 119> locations_array__ = 
{" (found before start of program)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 67, column 4 to column 27)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 68, column 4 to column 25)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 69, column 4 to column 23)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 70, column 4 to column 30)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 74, column 4 to column 51)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 77, column 4 to column 34)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 80, column 4 to column 37)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 83, column 4 to column 36)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 88, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 91, column 4 to column 49)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 98, column 4 to column 36)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 92, column 4 to column 52)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 94, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 95, column 4 to column 61)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 96, column 4 to column 36)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 99, column 4 to column 35)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 145, column 4 to column 16)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 147, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 148, column 4 to column 47)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 150, column 4 to column 26)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 154, column 12 to column 152)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 153, column 8 to line 154, column 152)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 152, column 4 to line 156, column 5)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 151, column 4 to line 156, column 5)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 158, column 8 to column 59)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 157, column 4 to line 158, column 59)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 105, column 4 to column 36)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 106, column 4 to column 42)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 107, column 4 to column 38)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 108, column 4 to column 38)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 109, column 4 to column 27)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 111, column 4 to column 39)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 113, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 113, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 113, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 114, column 4 to column 47)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 116, column 4 to column 49)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 119, column 8 to column 75)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 118, column 4 to line 119, column 75)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 122, column 8 to column 53)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 121, column 4 to line 122, column 53)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 125, column 15 to column 16)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 125, column 8 to column 28)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 128, column 12 to line 129, column 101)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 127, column 8 to line 129, column 101)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 131, column 8 to column 41)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 124, column 19 to line 132, column 5)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 124, column 4 to line 132, column 5)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 133, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 133, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 133, column 4 to column 26)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 137, column 12 to column 152)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 136, column 8 to line 137, column 152)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 135, column 4 to line 139, column 5)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 134, column 4 to line 139, column 5)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 4, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 5, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 6, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 7, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 9, column 11 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 9, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 10, column 11 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 10, column 15 to column 18)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 10, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 13, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 13, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 13, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 16, column 11 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 16, column 4 to column 25)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 17, column 11 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 17, column 15 to column 18)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 17, column 4 to column 28)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 20, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 20, column 4 to column 21)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 23, column 4 to column 26)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 24, column 4 to column 26)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 27, column 4 to column 25)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 28, column 4 to column 25)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 31, column 4 to column 27)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 32, column 4 to column 27)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 35, column 4 to column 28)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 36, column 4 to column 27)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 39, column 4 to column 23)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 40, column 4 to column 23)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 45, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 45, column 4 to column 21)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 47, column 8 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 46, column 4 to line 47, column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 49, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 49, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 49, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 50, column 4 to column 32)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 52, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 52, column 4 to column 21)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 54, column 8 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 53, column 4 to line 54, column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 56, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 56, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 56, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 57, column 4 to column 32)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 59, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 59, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 59, column 4 to column 18)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 60, column 4 to column 42)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 74, column 28 to column 29)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 77, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 77, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 80, column 11 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 80, column 15 to column 16)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 83, column 28 to column 31)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 88, column 12 to column 13)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 91, column 29 to column 32)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 98, column 29 to column 30)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 145, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 147, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 147, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 150, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/bayesian.stan', line 150, column 13 to column 14)"};




class bayesian_model final : public model_base_crtp<bayesian_model> {

 private:
  int I;
  int T;
  int P;
  int H;
  Eigen::Matrix<double, -1, 1> y__;
  Eigen::Matrix<double, -1, -1> X__;
  Eigen::Matrix<double, -1, -1> W_raw__;
  Eigen::Matrix<double, -1, 1> mu_0__;
  Eigen::Matrix<double, -1, -1> Sigma_0__;
  Eigen::Matrix<double, -1, 1> mu_w_1__;
  double a_alpha;
  double b_alpha;
  double a_tau2;
  double b_tau2;
  double a_sigma2;
  double b_sigma2;
  double alpha_rho;
  double beta_rho;
  double a_xi;
  double b_xi;
  Eigen::Matrix<double, -1, 1> ones_T__;
  Eigen::Matrix<double, -1, -1> eye_T__;
  Eigen::Matrix<double, -1, 1> ones_I__;
  Eigen::Matrix<double, -1, -1> eye_I__;
  Eigen::Matrix<double, -1, -1> W__;
  int betas_1dim__;
  int vs_1dim__;
  int cumprod_one_mv_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> W_raw{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mu_0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Sigma_0{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mu_w_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ones_T{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> eye_T{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ones_I{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> eye_I{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> W{nullptr, 0, 0};
 
 public:
  ~bayesian_model() { }
  
  inline std::string model_name() const final { return "bayesian_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  bayesian_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "bayesian_model_namespace::bayesian_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 56;
      context__.validate_dims("data initialization","I","int",
           std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      
      
      current_statement__ = 56;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "I", I, 1);
      current_statement__ = 57;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 57;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 58;
      context__.validate_dims("data initialization","P","int",
           std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      
      
      current_statement__ = 58;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "P", P, 1);
      current_statement__ = 59;
      context__.validate_dims("data initialization","H","int",
           std::vector<size_t>{});
      H = std::numeric_limits<int>::min();
      
      
      current_statement__ = 59;
      H = context__.vals_i("H")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "H", H, 1);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("y", "I * T", (I * T));
      current_statement__ = 61;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>((I * T))});
      y__ = 
        Eigen::Matrix<double, -1, 1>::Constant((I * T),
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), (I * T));
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 61;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= (I * T); ++sym1__) {
          current_statement__ = 61;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 61;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 62;
      stan::math::validate_non_negative_index("X", "I * T", (I * T));
      current_statement__ = 63;
      stan::math::validate_non_negative_index("X", "P + 1", (P + 1));
      current_statement__ = 64;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>((I * T)),
            static_cast<size_t>((P + 1))});
      X__ = 
        Eigen::Matrix<double, -1, -1>::Constant((I * T), (P + 1),
          std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X__.data(), 
        (I * T), (P + 1));
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 64;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 64;
          for (int sym2__ = 1; sym2__ <= (I * T); ++sym2__) {
            current_statement__ = 64;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 64;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 65;
      stan::math::validate_non_negative_index("W_raw", "I", I);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("W_raw", "I", I);
      current_statement__ = 67;
      context__.validate_dims("data initialization","W_raw","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(I)});
      W_raw__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&W_raw) Eigen::Map<Eigen::Matrix<double, -1, -1>>(W_raw__.data(), I, I);
        
      
      {
        std::vector<local_scalar_t__> W_raw_flat__;
        current_statement__ = 67;
        W_raw_flat__ = context__.vals_r("W_raw");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 67;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 67;
            stan::model::assign(W_raw, W_raw_flat__[(pos__ - 1)],
              "assigning variable W_raw", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 67;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 68;
      stan::math::validate_non_negative_index("mu_0", "P + 1", (P + 1));
      current_statement__ = 69;
      context__.validate_dims("data initialization","mu_0","double",
           std::vector<size_t>{static_cast<size_t>((P + 1))});
      mu_0__ = 
        Eigen::Matrix<double, -1, 1>::Constant((P + 1),
          std::numeric_limits<double>::quiet_NaN());
      new (&mu_0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mu_0__.data(), 
        (P + 1));
      
      {
        std::vector<local_scalar_t__> mu_0_flat__;
        current_statement__ = 69;
        mu_0_flat__ = context__.vals_r("mu_0");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 69;
          stan::model::assign(mu_0, mu_0_flat__[(pos__ - 1)],
            "assigning variable mu_0", stan::model::index_uni(sym1__));
          current_statement__ = 69;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 70;
      stan::math::validate_non_negative_index("Sigma_0", "P + 1", (P + 1));
      current_statement__ = 71;
      stan::math::validate_non_negative_index("Sigma_0", "P + 1", (P + 1));
      current_statement__ = 72;
      context__.validate_dims("data initialization","Sigma_0","double",
           std::vector<size_t>{static_cast<size_t>((P + 1)),
            static_cast<size_t>((P + 1))});
      Sigma_0__ = 
        Eigen::Matrix<double, -1, -1>::Constant((P + 1), (P + 1),
          std::numeric_limits<double>::quiet_NaN());
      new (&Sigma_0) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Sigma_0__.data(), 
        (P + 1), (P + 1));
      
      {
        std::vector<local_scalar_t__> Sigma_0_flat__;
        current_statement__ = 72;
        Sigma_0_flat__ = context__.vals_r("Sigma_0");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= (P + 1); ++sym2__) {
            current_statement__ = 72;
            stan::model::assign(Sigma_0, Sigma_0_flat__[(pos__ - 1)],
              "assigning variable Sigma_0", stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
            current_statement__ = 72;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 73;
      stan::math::validate_non_negative_index("mu_w_1", "I", I);
      current_statement__ = 74;
      context__.validate_dims("data initialization","mu_w_1","double",
           std::vector<size_t>{static_cast<size_t>(I)});
      mu_w_1__ = 
        Eigen::Matrix<double, -1, 1>::Constant(I,
          std::numeric_limits<double>::quiet_NaN());
      new (&mu_w_1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mu_w_1__.data(), I);
        
      
      {
        std::vector<local_scalar_t__> mu_w_1_flat__;
        current_statement__ = 74;
        mu_w_1_flat__ = context__.vals_r("mu_w_1");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 74;
          stan::model::assign(mu_w_1, mu_w_1_flat__[(pos__ - 1)],
            "assigning variable mu_w_1", stan::model::index_uni(sym1__));
          current_statement__ = 74;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 75;
      context__.validate_dims("data initialization","a_alpha","double",
           std::vector<size_t>{});
      a_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 75;
      a_alpha = context__.vals_r("a_alpha")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "a_alpha", a_alpha, 0);
      current_statement__ = 76;
      context__.validate_dims("data initialization","b_alpha","double",
           std::vector<size_t>{});
      b_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 76;
      b_alpha = context__.vals_r("b_alpha")[(1 - 1)];
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "b_alpha", b_alpha, 0);
      current_statement__ = 77;
      context__.validate_dims("data initialization","a_tau2","double",
           std::vector<size_t>{});
      a_tau2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 77;
      a_tau2 = context__.vals_r("a_tau2")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "a_tau2", a_tau2, 0);
      current_statement__ = 78;
      context__.validate_dims("data initialization","b_tau2","double",
           std::vector<size_t>{});
      b_tau2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 78;
      b_tau2 = context__.vals_r("b_tau2")[(1 - 1)];
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "b_tau2", b_tau2, 0);
      current_statement__ = 79;
      context__.validate_dims("data initialization","a_sigma2","double",
           std::vector<size_t>{});
      a_sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 79;
      a_sigma2 = context__.vals_r("a_sigma2")[(1 - 1)];
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "a_sigma2", a_sigma2, 0);
      current_statement__ = 80;
      context__.validate_dims("data initialization","b_sigma2","double",
           std::vector<size_t>{});
      b_sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 80;
      b_sigma2 = context__.vals_r("b_sigma2")[(1 - 1)];
      current_statement__ = 80;
      stan::math::check_greater_or_equal(function__, "b_sigma2", b_sigma2, 0);
      current_statement__ = 81;
      context__.validate_dims("data initialization","alpha_rho","double",
           std::vector<size_t>{});
      alpha_rho = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 81;
      alpha_rho = context__.vals_r("alpha_rho")[(1 - 1)];
      current_statement__ = 81;
      stan::math::check_greater_or_equal(function__, "alpha_rho", alpha_rho,
                                            0);
      current_statement__ = 82;
      context__.validate_dims("data initialization","beta_rho","double",
           std::vector<size_t>{});
      beta_rho = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 82;
      beta_rho = context__.vals_r("beta_rho")[(1 - 1)];
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "beta_rho", beta_rho, 0);
      current_statement__ = 83;
      context__.validate_dims("data initialization","a_xi","double",
           std::vector<size_t>{});
      a_xi = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 83;
      a_xi = context__.vals_r("a_xi")[(1 - 1)];
      current_statement__ = 83;
      stan::math::check_greater_or_equal(function__, "a_xi", a_xi, 0);
      current_statement__ = 84;
      context__.validate_dims("data initialization","b_xi","double",
           std::vector<size_t>{});
      b_xi = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 84;
      b_xi = context__.vals_r("b_xi")[(1 - 1)];
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "b_xi", b_xi, 0);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("ones_T", "T", T);
      current_statement__ = 86;
      ones_T__ = 
        Eigen::Matrix<double, -1, 1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      new (&ones_T) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ones_T__.data(), T);
        
      
      current_statement__ = 88;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 87;
        stan::model::assign(ones_T, 1,
          "assigning variable ones_T", stan::model::index_uni(t));
      }
      current_statement__ = 89;
      stan::math::validate_non_negative_index("eye_T", "T", T);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("eye_T", "T", T);
      current_statement__ = 91;
      eye_T__ = 
        Eigen::Matrix<double, -1, -1>::Constant(T, T,
          std::numeric_limits<double>::quiet_NaN());
      new (&eye_T) Eigen::Map<Eigen::Matrix<double, -1, -1>>(eye_T__.data(), T, T);
        
      
      current_statement__ = 92;
      stan::model::assign(eye_T, stan::math::diag_matrix(ones_T),
        "assigning variable eye_T");
      current_statement__ = 93;
      stan::math::validate_non_negative_index("ones_I", "I", I);
      current_statement__ = 94;
      ones_I__ = 
        Eigen::Matrix<double, -1, 1>::Constant(I,
          std::numeric_limits<double>::quiet_NaN());
      new (&ones_I) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ones_I__.data(), I);
        
      
      current_statement__ = 96;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 95;
        stan::model::assign(ones_I, 1,
          "assigning variable ones_I", stan::model::index_uni(i));
      }
      current_statement__ = 97;
      stan::math::validate_non_negative_index("eye_I", "I", I);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("eye_I", "I", I);
      current_statement__ = 99;
      eye_I__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&eye_I) Eigen::Map<Eigen::Matrix<double, -1, -1>>(eye_I__.data(), I, I);
        
      
      current_statement__ = 100;
      stan::model::assign(eye_I, stan::math::diag_matrix(ones_I),
        "assigning variable eye_I");
      current_statement__ = 101;
      stan::math::validate_non_negative_index("W", "I", I);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("W", "I", I);
      current_statement__ = 103;
      W__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&W) Eigen::Map<Eigen::Matrix<double, -1, -1>>(W__.data(), I, I);
      
      current_statement__ = 104;
      stan::model::assign(W,
        stan::math::subtract(
          stan::math::diag_matrix(stan::math::multiply(W_raw, ones_I)),
          W_raw), "assigning variable W");
      current_statement__ = 105;
      stan::math::validate_non_negative_index("xis_constructors", "I", I);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("ws", "T", T);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("ws", "I", I);
      current_statement__ = 108;
      betas_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 108;
      betas_1dim__ = (P + 1);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("betas", "P + 1", betas_1dim__);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("betas", "H", H);
      current_statement__ = 110;
      vs_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 110;
      vs_1dim__ = (H - 1);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("vs", "H - 1", vs_1dim__);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("omegas", "H", H);
      current_statement__ = 112;
      cumprod_one_mv_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 112;
      cumprod_one_mv_1dim__ = (H - 1);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("cumprod_one_mv", "H - 1",
                                              cumprod_one_mv_1dim__);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("xis", "I", I);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("s", "I", I);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("inv_Q", "I", I);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("inv_Q", "I", I);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("log_probs", "I", I);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("log_probs", "H", H);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + I + (T * I) + (betas_1dim__ * H)
       + vs_1dim__;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "bayesian_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                1e-8, lp__);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ tau2 = DUMMY_VAR__;
      current_statement__ = 3;
      tau2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 4;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> xis_constructors =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__);
      current_statement__ = 5;
      xis_constructors = in__.template read_constrain_lub<
                           Eigen::Matrix<local_scalar_t__, -1, 1>, 
                           jacobian__>(0, 1, lp__, I);
      Eigen::Matrix<local_scalar_t__, -1, -1> ws =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T, I, DUMMY_VAR__);
      current_statement__ = 6;
      ws = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(T, I);
      Eigen::Matrix<local_scalar_t__, -1, -1> betas =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(betas_1dim__, H,
           DUMMY_VAR__);
      current_statement__ = 7;
      betas = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                betas_1dim__, H);
      Eigen::Matrix<local_scalar_t__, -1, 1> vs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(vs_1dim__,
           DUMMY_VAR__);
      current_statement__ = 8;
      vs = in__.template read_constrain_lub<
             Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
             vs_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> omegas =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> cumprod_one_mv =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           cumprod_one_mv_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(cumprod_one_mv,
        stan::math::exp(stan::math::cumulative_sum(stan::math::log1m(vs))),
        "assigning variable cumprod_one_mv");
      current_statement__ = 13;
      stan::model::assign(omegas,
        stan::model::rvalue(vs, "vs", stan::model::index_uni(1)),
        "assigning variable omegas", stan::model::index_uni(1));
      current_statement__ = 14;
      stan::model::assign(omegas,
        stan::math::elt_multiply(
          stan::model::rvalue(vs, "vs",
            stan::model::index_min_max(2, (H - 1))),
          stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
            stan::model::index_min_max(1, (H - 2)))),
        "assigning variable omegas", stan::model::index_min_max(2, (H - 1)));
      current_statement__ = 15;
      stan::model::assign(omegas,
        stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
          stan::model::index_uni((H - 1))),
        "assigning variable omegas", stan::model::index_uni(H));
      Eigen::Matrix<local_scalar_t__, -1, 1> xis =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(xis,
        stan::math::subtract(stan::math::multiply(2, xis_constructors), 1),
        "assigning variable xis");
      current_statement__ = 9;
      stan::math::check_simplex(function__, "omegas", omegas);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "cumprod_one_mv",
                                            cumprod_one_mv, 0);
      current_statement__ = 10;
      stan::math::check_less_or_equal(function__, "cumprod_one_mv",
                                         cumprod_one_mv, 1);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "xis", xis, -1);
      current_statement__ = 11;
      stan::math::check_less_or_equal(function__, "xis", xis, 1);
      {
        current_statement__ = 27;
        lp_accum__.add(
          stan::math::gamma_lpdf<propto__>(alpha, a_alpha, b_alpha));
        current_statement__ = 28;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma2, a_sigma2, b_sigma2));
        current_statement__ = 29;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(tau2, a_tau2, b_tau2));
        current_statement__ = 30;
        lp_accum__.add(
          stan::math::beta_lpdf<propto__>(rho, alpha_rho, beta_rho));
        current_statement__ = 31;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(vs, 1, alpha));
        current_statement__ = 32;
        lp_accum__.add(
          stan::math::beta_lpdf<propto__>(xis_constructors, a_xi, b_xi));
        current_statement__ = 33;
        stan::math::validate_non_negative_index("inv_Q", "I", I);
        current_statement__ = 34;
        stan::math::validate_non_negative_index("inv_Q", "I", I);
        Eigen::Matrix<local_scalar_t__, -1, -1> inv_Q =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(I, I,
             DUMMY_VAR__);
        current_statement__ = 36;
        stan::model::assign(inv_Q,
          stan::math::inverse_spd(
            stan::math::add(stan::math::multiply(rho, W),
              stan::math::multiply((1 - rho), eye_I))),
          "assigning variable inv_Q");
        current_statement__ = 37;
        lp_accum__.add(
          stan::math::multi_normal_lpdf<propto__>(
            stan::model::rvalue(ws, "ws",
              stan::model::index_uni(1), stan::model::index_min_max(1, I)),
            mu_w_1, stan::math::multiply(tau2, inv_Q)));
        current_statement__ = 39;
        for (int t = 2; t <= T; ++t) {
          current_statement__ = 38;
          lp_accum__.add(
            stan::math::multi_normal_lpdf<propto__>(
              stan::model::rvalue(ws, "ws",
                stan::model::index_uni(t), stan::model::index_min_max(1, I)),
              stan::math::multiply(
                stan::model::rvalue(ws, "ws",
                  stan::model::index_uni((t - 1)),
                    stan::model::index_min_max(1, I)),
                stan::math::diag_matrix(xis)),
              stan::math::multiply(tau2, inv_Q)));
        }
        current_statement__ = 41;
        for (int h = 1; h <= H; ++h) {
          current_statement__ = 40;
          lp_accum__.add(
            stan::math::multi_normal_lpdf<propto__>(
              stan::model::rvalue(betas, "betas",
                stan::model::index_min_max(1, (P + 1)),
                  stan::model::index_uni(h)), mu_0, Sigma_0));
        }
        current_statement__ = 48;
        for (int i = 1; i <= I; ++i) {
          current_statement__ = 42;
          stan::math::validate_non_negative_index("log_probs", "H", H);
          Eigen::Matrix<local_scalar_t__, -1, 1> log_probs =
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
          current_statement__ = 45;
          for (int h = 1; h <= H; ++h) {
            current_statement__ = 44;
            stan::model::assign(log_probs,
              (stan::math::log(
                 stan::model::rvalue(omegas, "omegas",
                   stan::model::index_uni(h))) +
                stan::math::multi_normal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_min_max(((T * (i - 1)) + 1), (i * T))),
                  stan::math::add(
                    stan::math::multiply(
                      stan::model::rvalue(X, "X",
                        stan::model::index_min_max(((T * (i - 1)) + 1), 
                          (i * T)), stan::model::index_min_max(1, (P + 1))),
                      stan::model::rvalue(betas, "betas",
                        stan::model::index_min_max(1, (P + 1)),
                          stan::model::index_uni(h))),
                    stan::model::rvalue(ws, "ws",
                      stan::model::index_min_max(1, T),
                        stan::model::index_uni(i))),
                  stan::math::multiply(sigma2, eye_T))),
              "assigning variable log_probs", stan::model::index_uni(h));
          }
          current_statement__ = 46;
          lp_accum__.add(stan::math::log_sum_exp(log_probs));
        }
        current_statement__ = 49;
        stan::math::validate_non_negative_index("log_probs", "I", I);
        current_statement__ = 50;
        stan::math::validate_non_negative_index("log_probs", "H", H);
        Eigen::Matrix<local_scalar_t__, -1, -1> log_probs =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(I, H,
             DUMMY_VAR__);
        current_statement__ = 55;
        for (int i = 1; i <= I; ++i) {
          current_statement__ = 53;
          for (int h = 1; h <= H; ++h) {
            current_statement__ = 52;
            stan::model::assign(log_probs,
              (stan::math::log(
                 stan::model::rvalue(omegas, "omegas",
                   stan::model::index_uni(h))) +
                stan::math::multi_normal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_min_max(((T * (i - 1)) + 1), (i * T))),
                  stan::math::add(
                    stan::math::multiply(
                      stan::model::rvalue(X, "X",
                        stan::model::index_min_max(((T * (i - 1)) + 1), 
                          (i * T)), stan::model::index_min_max(1, (P + 1))),
                      stan::model::rvalue(betas, "betas",
                        stan::model::index_min_max(1, (P + 1)),
                          stan::model::index_uni(h))),
                    stan::model::rvalue(ws, "ws",
                      stan::model::index_min_max(1, T),
                        stan::model::index_uni(i))),
                  stan::math::multiply(sigma2, eye_T))),
              "assigning variable log_probs", stan::model::index_uni(i),
                                                stan::model::index_uni(h));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "bayesian_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                1e-8, lp__);
      double sigma2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double tau2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      tau2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<double, -1, 1> xis_constructors =
         Eigen::Matrix<double, -1, 1>::Constant(I,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      xis_constructors = in__.template read_constrain_lub<
                           Eigen::Matrix<local_scalar_t__, -1, 1>, 
                           jacobian__>(0, 1, lp__, I);
      Eigen::Matrix<double, -1, -1> ws =
         Eigen::Matrix<double, -1, -1>::Constant(T, I,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      ws = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(T, I);
      Eigen::Matrix<double, -1, -1> betas =
         Eigen::Matrix<double, -1, -1>::Constant(betas_1dim__, H,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      betas = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                betas_1dim__, H);
      Eigen::Matrix<double, -1, 1> vs =
         Eigen::Matrix<double, -1, 1>::Constant(vs_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      vs = in__.template read_constrain_lub<
             Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
             vs_1dim__);
      Eigen::Matrix<double, -1, 1> omegas =
         Eigen::Matrix<double, -1, 1>::Constant(H,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cumprod_one_mv =
         Eigen::Matrix<double, -1, 1>::Constant(cumprod_one_mv_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> xis =
         Eigen::Matrix<double, -1, 1>::Constant(I,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha);
      out__.write(sigma2);
      out__.write(tau2);
      out__.write(rho);
      out__.write(xis_constructors);
      out__.write(ws);
      out__.write(betas);
      out__.write(vs);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      stan::model::assign(cumprod_one_mv,
        stan::math::exp(stan::math::cumulative_sum(stan::math::log1m(vs))),
        "assigning variable cumprod_one_mv");
      current_statement__ = 13;
      stan::model::assign(omegas,
        stan::model::rvalue(vs, "vs", stan::model::index_uni(1)),
        "assigning variable omegas", stan::model::index_uni(1));
      current_statement__ = 14;
      stan::model::assign(omegas,
        stan::math::elt_multiply(
          stan::model::rvalue(vs, "vs",
            stan::model::index_min_max(2, (H - 1))),
          stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
            stan::model::index_min_max(1, (H - 2)))),
        "assigning variable omegas", stan::model::index_min_max(2, (H - 1)));
      current_statement__ = 15;
      stan::model::assign(omegas,
        stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
          stan::model::index_uni((H - 1))),
        "assigning variable omegas", stan::model::index_uni(H));
      current_statement__ = 16;
      stan::model::assign(xis,
        stan::math::subtract(stan::math::multiply(2, xis_constructors), 1),
        "assigning variable xis");
      current_statement__ = 9;
      stan::math::check_simplex(function__, "omegas", omegas);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "cumprod_one_mv",
                                            cumprod_one_mv, 0);
      current_statement__ = 10;
      stan::math::check_less_or_equal(function__, "cumprod_one_mv",
                                         cumprod_one_mv, 1);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "xis", xis, -1);
      current_statement__ = 11;
      stan::math::check_less_or_equal(function__, "xis", xis, 1);
      if (emit_transformed_parameters__) {
        out__.write(omegas);
        out__.write(cumprod_one_mv);
        out__.write(xis);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> s =
         Eigen::Matrix<double, -1, 1>::Constant(I,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> inv_Q =
         Eigen::Matrix<double, -1, -1>::Constant(I, I,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      stan::model::assign(inv_Q,
        stan::math::inverse_spd(
          stan::math::add(stan::math::multiply(rho, W),
            stan::math::multiply((1 - rho), eye_I))),
        "assigning variable inv_Q");
      Eigen::Matrix<double, -1, -1> log_probs =
         Eigen::Matrix<double, -1, -1>::Constant(I, H,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 24;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 22;
        for (int h = 1; h <= H; ++h) {
          current_statement__ = 21;
          stan::model::assign(log_probs,
            (stan::math::log(
               stan::model::rvalue(omegas, "omegas",
                 stan::model::index_uni(h))) +
              stan::math::multi_normal_lpdf<false>(
                stan::model::rvalue(y, "y",
                  stan::model::index_min_max(((T * (i - 1)) + 1), (i * T))),
                stan::math::add(
                  stan::math::multiply(
                    stan::model::rvalue(X, "X",
                      stan::model::index_min_max(((T * (i - 1)) + 1), 
                        (i * T)), stan::model::index_min_max(1, (P + 1))),
                    stan::model::rvalue(betas, "betas",
                      stan::model::index_min_max(1, (P + 1)),
                        stan::model::index_uni(h))),
                  stan::model::rvalue(ws, "ws",
                    stan::model::index_min_max(1, T),
                      stan::model::index_uni(i))),
                stan::math::multiply(sigma2, eye_T))),
            "assigning variable log_probs", stan::model::index_uni(i),
                                              stan::model::index_uni(h));
        }
      }
      current_statement__ = 26;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 25;
        stan::model::assign(s,
          stan::math::categorical_rng(
            stan::math::softmax(
              stan::math::transpose(
                stan::model::rvalue(log_probs, "log_probs",
                  stan::model::index_uni(i), stan::model::index_min_max(1, H)))),
            base_rng__), "assigning variable s", stan::model::index_uni(i));
      }
      out__.write(s);
      out__.write(inv_Q);
      out__.write(log_probs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(1e-8, alpha);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      sigma2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2);
      local_scalar_t__ tau2 = DUMMY_VAR__;
      tau2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau2);
      local_scalar_t__ rho = DUMMY_VAR__;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, rho);
      Eigen::Matrix<local_scalar_t__, -1, 1> xis_constructors =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        stan::model::assign(xis_constructors, in__.read<local_scalar_t__>(),
          "assigning variable xis_constructors", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, xis_constructors);
      Eigen::Matrix<local_scalar_t__, -1, -1> ws =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T, I, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          stan::model::assign(ws, in__.read<local_scalar_t__>(),
            "assigning variable ws", stan::model::index_uni(sym2__),
                                       stan::model::index_uni(sym1__));
        }
      }
      out__.write(ws);
      Eigen::Matrix<local_scalar_t__, -1, -1> betas =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(betas_1dim__, H,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= betas_1dim__; ++sym2__) {
          stan::model::assign(betas, in__.read<local_scalar_t__>(),
            "assigning variable betas", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
        }
      }
      out__.write(betas);
      Eigen::Matrix<local_scalar_t__, -1, 1> vs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(vs_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= vs_1dim__; ++sym1__) {
        stan::model::assign(vs, in__.read<local_scalar_t__>(),
          "assigning variable vs", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, vs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "sigma2", "tau2", "rho",
      "xis_constructors", "ws", "betas", "vs", "omegas", "cumprod_one_mv",
      "xis", "s", "inv_Q", "log_probs"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(betas_1dim__),
                          static_cast<size_t>(H)},
      std::vector<size_t>{static_cast<size_t>(vs_1dim__)},
      std::vector<size_t>{static_cast<size_t>(H)},
      std::vector<size_t>{static_cast<size_t>(cumprod_one_mv_1dim__)},
      std::vector<size_t>{static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(H)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "tau2");
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xis_constructors" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= betas_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= vs_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vs" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omegas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= cumprod_one_mv_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumprod_one_mv" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "xis" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "s" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "inv_Q" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_probs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "tau2");
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xis_constructors" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= betas_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= vs_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vs" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= (H - 1); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omegas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= cumprod_one_mv_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumprod_one_mv" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "xis" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "s" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "inv_Q" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_probs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xis_constructors\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"parameters\"},{\"name\":\"betas\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(betas_1dim__) + ",\"cols\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"vs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(vs_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"omegas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cumprod_one_mv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cumprod_one_mv_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"xis\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"inv_Q\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_probs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(H) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xis_constructors\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"parameters\"},{\"name\":\"betas\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(betas_1dim__) + ",\"cols\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"vs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(vs_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"omegas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((H - 1)) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cumprod_one_mv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cumprod_one_mv_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"xis\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"inv_Q\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_probs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(H) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((1 + 1) + 1) + 1) + I) + (T * I)) + (betas_1dim__ * H)) + vs_1dim__);
      const size_t num_transformed = 
  ((H + cumprod_one_mv_1dim__) + I);
      const size_t num_gen_quantities = 
  ((I + (I * I)) + (I * H));
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((1 + 1) + 1) + 1) + I) + (T * I)) + (betas_1dim__ * H)) + vs_1dim__);
      const size_t num_transformed = 
  ((H + cumprod_one_mv_1dim__) + I);
      const size_t num_gen_quantities = 
  ((I + (I * I)) + (I * H));
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 8> names__{"alpha", "sigma2", "tau2",
      "rho", "xis_constructors", "ws", "betas", "vs"};
      const std::array<Eigen::Index, 8> constrain_param_sizes__{1, 1, 
       1, 1, I, (T * I), (betas_1dim__ * H), vs_1dim__};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = bayesian_model_namespace::bayesian_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return bayesian_model_namespace::profiles__;
}

#endif


