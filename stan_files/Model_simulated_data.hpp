
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace Model_simulated_data_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 95> locations_array__ = 
{" (found before start of program)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 49, column 4 to column 24)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 50, column 4 to column 25)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 51, column 4 to column 23)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 54, column 4 to column 41)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 57, column 4 to column 31)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 60, column 4 to column 36)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 63, column 4 to column 29)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 69, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 72, column 4 to column 31)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 80, column 4 to column 33)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 83, column 4 to column 38)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 90, column 4 to column 33)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 93, column 4 to column 30)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 94, column 4 to column 26)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 73, column 4 to column 52)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 75, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 76, column 4 to column 61)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 77, column 4 to column 36)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 85, column 4 to column 41)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 88, column 8 to column 56)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 87, column 4 to line 88, column 56)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 128, column 4 to column 16)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 131, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 133, column 4 to column 33)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 138, column 12 to column 99)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 137, column 8 to line 138, column 99)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 140, column 8 to column 54)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 142, column 8 to column 47)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 136, column 4 to line 143, column 5)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 135, column 4 to line 143, column 5)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 99, column 4 to column 36)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 100, column 4 to column 42)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 101, column 4 to column 38)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 102, column 4 to column 27)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 103, column 4 to column 37)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 105, column 4 to column 30)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 108, column 8 to column 34)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 107, column 4 to line 108, column 34)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 111, column 8 to column 41)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 110, column 4 to line 111, column 41)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 113, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 113, column 4 to column 24)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 119, column 12 to column 97)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 117, column 8 to line 119, column 97)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 121, column 8 to column 41)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 115, column 19 to line 122, column 5)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 115, column 4 to line 122, column 5)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 4, column 4 to column 10)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 5, column 4 to column 10)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 6, column 4 to column 10)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 7, column 4 to column 10)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 9, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 9, column 20 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 9, column 4 to column 25)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 10, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 10, column 20 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 10, column 22 to column 25)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 10, column 4 to column 29)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 13, column 11 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 13, column 4 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 14, column 4 to column 24)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 17, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 17, column 4 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 20, column 4 to column 17)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 21, column 4 to column 17)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 24, column 4 to column 16)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 25, column 4 to column 16)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 28, column 4 to column 18)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 29, column 4 to column 18)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 32, column 4 to column 13)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 35, column 4 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 36, column 4 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 39, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 39, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 39, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 43, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 43, column 14 to column 15)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 43, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 44, column 4 to column 34)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 57, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 57, column 20 to column 23)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 60, column 28 to column 31)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 63, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 63, column 20 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 69, column 12 to column 13)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 72, column 11 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 83, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 83, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 90, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 90, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 128, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 131, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 133, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/Model_simulated_data.stan', line 133, column 20 to column 21)"};




class Model_simulated_data_model final : public model_base_crtp<Model_simulated_data_model> {

 private:
  int I;
  int T;
  int P;
  int H;
  std::vector<Eigen::Matrix<double, -1, 1>> y;
  std::vector<Eigen::Matrix<double, -1, -1>> X;
  Eigen::Matrix<double, -1, 1> mu_0__;
  double sigma_0;
  Eigen::Matrix<double, -1, 1> mu_w_1__;
  double a_alpha;
  double b_alpha;
  double a_tau2;
  double b_tau2;
  double a_sigma2;
  double b_sigma2;
  double rho;
  double a_xi;
  double b_xi;
  Eigen::Matrix<double, -1, -1> inv_Q__;
  Eigen::Matrix<double, -1, -1> L__;
  int betas_2dim__;
  int vs_1dim__;
  int cumprod_one_mv_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mu_0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mu_w_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> inv_Q{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> L{nullptr, 0, 0};
 
 public:
  ~Model_simulated_data_model() { }
  
  inline std::string model_name() const final { return "Model_simulated_data_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  Model_simulated_data_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "Model_simulated_data_model_namespace::Model_simulated_data_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 48;
      context__.validate_dims("data initialization","I","int",
           std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      
      
      current_statement__ = 48;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 49;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 50;
      context__.validate_dims("data initialization","P","int",
           std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      
      
      current_statement__ = 50;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 51;
      context__.validate_dims("data initialization","H","int",
           std::vector<size_t>{});
      H = std::numeric_limits<int>::min();
      
      
      current_statement__ = 51;
      H = context__.vals_i("H")[(1 - 1)];
      current_statement__ = 52;
      stan::math::validate_non_negative_index("y", "I", I);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("y", "T", T);
      current_statement__ = 54;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(T)});
      y = 
        std::vector<Eigen::Matrix<double, -1, 1>>(I, 
          Eigen::Matrix<double, -1, 1>::Constant(T,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 54;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 54;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 54;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 54;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 55;
      stan::math::validate_non_negative_index("X", "I", I);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("X", "T", T);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("X", "P + 1", (P + 1));
      current_statement__ = 58;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(T), static_cast<size_t>((P + 1))});
      X = 
        std::vector<Eigen::Matrix<double, -1, -1>>(I, 
          Eigen::Matrix<double, -1, -1>::Constant(T, (P + 1),
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 58;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 58;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 58;
            for (int sym3__ = 1; sym3__ <= I; ++sym3__) {
              current_statement__ = 58;
              stan::model::assign(X, X_flat__[(pos__ - 1)],
                "assigning variable X", stan::model::index_uni(sym3__),
                                          stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
              current_statement__ = 58;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 59;
      stan::math::validate_non_negative_index("mu_0", "P + 1", (P + 1));
      current_statement__ = 60;
      context__.validate_dims("data initialization","mu_0","double",
           std::vector<size_t>{static_cast<size_t>((P + 1))});
      mu_0__ = 
        Eigen::Matrix<double, -1, 1>::Constant((P + 1),
          std::numeric_limits<double>::quiet_NaN());
      new (&mu_0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mu_0__.data(), 
        (P + 1));
      
      {
        std::vector<local_scalar_t__> mu_0_flat__;
        current_statement__ = 60;
        mu_0_flat__ = context__.vals_r("mu_0");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 60;
          stan::model::assign(mu_0, mu_0_flat__[(pos__ - 1)],
            "assigning variable mu_0", stan::model::index_uni(sym1__));
          current_statement__ = 60;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 61;
      context__.validate_dims("data initialization","sigma_0","double",
           std::vector<size_t>{});
      sigma_0 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 61;
      sigma_0 = context__.vals_r("sigma_0")[(1 - 1)];
      current_statement__ = 62;
      stan::math::validate_non_negative_index("mu_w_1", "I", I);
      current_statement__ = 63;
      context__.validate_dims("data initialization","mu_w_1","double",
           std::vector<size_t>{static_cast<size_t>(I)});
      mu_w_1__ = 
        Eigen::Matrix<double, -1, 1>::Constant(I,
          std::numeric_limits<double>::quiet_NaN());
      new (&mu_w_1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mu_w_1__.data(), I);
        
      
      {
        std::vector<local_scalar_t__> mu_w_1_flat__;
        current_statement__ = 63;
        mu_w_1_flat__ = context__.vals_r("mu_w_1");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 63;
          stan::model::assign(mu_w_1, mu_w_1_flat__[(pos__ - 1)],
            "assigning variable mu_w_1", stan::model::index_uni(sym1__));
          current_statement__ = 63;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 64;
      context__.validate_dims("data initialization","a_alpha","double",
           std::vector<size_t>{});
      a_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 64;
      a_alpha = context__.vals_r("a_alpha")[(1 - 1)];
      current_statement__ = 65;
      context__.validate_dims("data initialization","b_alpha","double",
           std::vector<size_t>{});
      b_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 65;
      b_alpha = context__.vals_r("b_alpha")[(1 - 1)];
      current_statement__ = 66;
      context__.validate_dims("data initialization","a_tau2","double",
           std::vector<size_t>{});
      a_tau2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 66;
      a_tau2 = context__.vals_r("a_tau2")[(1 - 1)];
      current_statement__ = 67;
      context__.validate_dims("data initialization","b_tau2","double",
           std::vector<size_t>{});
      b_tau2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 67;
      b_tau2 = context__.vals_r("b_tau2")[(1 - 1)];
      current_statement__ = 68;
      context__.validate_dims("data initialization","a_sigma2","double",
           std::vector<size_t>{});
      a_sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 68;
      a_sigma2 = context__.vals_r("a_sigma2")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization","b_sigma2","double",
           std::vector<size_t>{});
      b_sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 69;
      b_sigma2 = context__.vals_r("b_sigma2")[(1 - 1)];
      current_statement__ = 70;
      context__.validate_dims("data initialization","rho","double",
           std::vector<size_t>{});
      rho = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 70;
      rho = context__.vals_r("rho")[(1 - 1)];
      current_statement__ = 71;
      context__.validate_dims("data initialization","a_xi","double",
           std::vector<size_t>{});
      a_xi = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 71;
      a_xi = context__.vals_r("a_xi")[(1 - 1)];
      current_statement__ = 72;
      context__.validate_dims("data initialization","b_xi","double",
           std::vector<size_t>{});
      b_xi = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 72;
      b_xi = context__.vals_r("b_xi")[(1 - 1)];
      current_statement__ = 73;
      stan::math::validate_non_negative_index("inv_Q", "I", I);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("inv_Q", "I", I);
      current_statement__ = 75;
      context__.validate_dims("data initialization","inv_Q","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(I)});
      inv_Q__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&inv_Q) Eigen::Map<Eigen::Matrix<double, -1, -1>>(inv_Q__.data(), I, I);
        
      
      {
        std::vector<local_scalar_t__> inv_Q_flat__;
        current_statement__ = 75;
        inv_Q_flat__ = context__.vals_r("inv_Q");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 75;
            stan::model::assign(inv_Q, inv_Q_flat__[(pos__ - 1)],
              "assigning variable inv_Q", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 75;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 76;
      stan::math::validate_non_negative_index("L", "I", I);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("L", "I", I);
      current_statement__ = 78;
      L__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&L) Eigen::Map<Eigen::Matrix<double, -1, -1>>(L__.data(), I, I);
      
      current_statement__ = 79;
      stan::model::assign(L, stan::math::cholesky_decompose(inv_Q),
        "assigning variable L");
      current_statement__ = 80;
      stan::math::validate_non_negative_index("betas", "H", H);
      current_statement__ = 81;
      betas_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 81;
      betas_2dim__ = (P + 1);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("betas", "P + 1", betas_2dim__);
      current_statement__ = 82;
      vs_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 82;
      vs_1dim__ = (H - 1);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("vs", "H - 1", vs_1dim__);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("w_raw", "T", T);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("w_raw", "I", I);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("omegas", "H", H);
      current_statement__ = 86;
      cumprod_one_mv_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 86;
      cumprod_one_mv_1dim__ = (H - 1);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("cumprod_one_mv", "H - 1",
                                              cumprod_one_mv_1dim__);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("ws_tmp", "I", I);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("ws_tmp", "T", T);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("ws", "T", T);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("ws", "I", I);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("s", "I", I);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("log_lik", "I", I);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("log_probs", "I", I);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("log_probs", "H", H);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + (H * betas_2dim__) + vs_1dim__ + 
      (T * I);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "Model_simulated_data_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ tau2 = DUMMY_VAR__;
      current_statement__ = 3;
      tau2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ xi_constructor = DUMMY_VAR__;
      current_statement__ = 4;
      xi_constructor = in__.template read_constrain_lub<local_scalar_t__, 
                         jacobian__>(0, 1, lp__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> betas =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(H, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(betas_2dim__,
             DUMMY_VAR__));
      current_statement__ = 5;
      betas = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(H,
                betas_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> vs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(vs_1dim__,
           DUMMY_VAR__);
      current_statement__ = 6;
      vs = in__.template read_constrain_lub<
             Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
             vs_1dim__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> w_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(T, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__));
      current_statement__ = 7;
      w_raw = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(T, I);
      Eigen::Matrix<local_scalar_t__, -1, 1> omegas =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> cumprod_one_mv =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           cumprod_one_mv_1dim__, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(cumprod_one_mv,
        stan::math::exp(stan::math::cumulative_sum(stan::math::log1m(vs))),
        "assigning variable cumprod_one_mv");
      current_statement__ = 16;
      stan::model::assign(omegas,
        stan::model::rvalue(vs, "vs", stan::model::index_uni(1)),
        "assigning variable omegas", stan::model::index_uni(1));
      current_statement__ = 17;
      stan::model::assign(omegas,
        stan::math::elt_multiply(
          stan::model::rvalue(vs, "vs",
            stan::model::index_min_max(2, (H - 1))),
          stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
            stan::model::index_min_max(1, (H - 2)))),
        "assigning variable omegas", stan::model::index_min_max(2, (H - 1)));
      current_statement__ = 18;
      stan::model::assign(omegas,
        stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
          stan::model::index_uni((H - 1))),
        "assigning variable omegas", stan::model::index_uni(H));
      local_scalar_t__ xi = DUMMY_VAR__;
      current_statement__ = 10;
      xi = ((2 * xi_constructor) - 1);
      Eigen::Matrix<local_scalar_t__, -1, -1> ws_tmp =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(I, T, DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(ws_tmp,
        stan::math::add(mu_w_1,
          stan::math::multiply(L,
            stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(1)))),
        "assigning variable ws_tmp", stan::model::index_min_max(1, I),
                                       stan::model::index_uni(1));
      current_statement__ = 21;
      for (int t = 2; t <= T; ++t) {
        current_statement__ = 20;
        stan::model::assign(ws_tmp,
          stan::math::add(
            stan::math::multiply(
              stan::model::deep_copy(
                stan::model::rvalue(ws_tmp, "ws_tmp",
                  stan::model::index_min_max(1, I),
                    stan::model::index_uni((t - 1)))), xi),
            stan::math::multiply(L,
              stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(t)))),
          "assigning variable ws_tmp", stan::model::index_min_max(1, I),
                                         stan::model::index_uni(t));
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> ws =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T, I, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(ws, stan::math::transpose(ws_tmp),
        "assigning variable ws");
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 13;
      sigma = stan::math::sqrt(sigma2);
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 14;
      tau = stan::math::sqrt(tau2);
      current_statement__ = 8;
      stan::math::check_simplex(function__, "omegas", omegas);
      {
        current_statement__ = 31;
        lp_accum__.add(
          stan::math::gamma_lpdf<propto__>(alpha, a_alpha, b_alpha));
        current_statement__ = 32;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma2, a_sigma2, b_sigma2));
        current_statement__ = 33;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(tau2, a_tau2, b_tau2));
        current_statement__ = 34;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(vs, 1, alpha));
        current_statement__ = 35;
        lp_accum__.add(
          stan::math::beta_lpdf<propto__>(xi_constructor, a_xi, b_xi));
        current_statement__ = 36;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(1)),
            0, tau));
        current_statement__ = 38;
        for (int t = 2; t <= T; ++t) {
          current_statement__ = 37;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(t)),
              0, tau));
        }
        current_statement__ = 40;
        for (int h = 1; h <= H; ++h) {
          current_statement__ = 39;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(betas, "betas", stan::model::index_uni(h)),
              mu_0, sigma_0));
        }
        current_statement__ = 41;
        stan::math::validate_non_negative_index("log_probs", "H", H);
        Eigen::Matrix<local_scalar_t__, -1, 1> log_probs =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
        current_statement__ = 47;
        for (int i = 1; i <= I; ++i) {
          current_statement__ = 44;
          for (int h = 1; h <= H; ++h) {
            current_statement__ = 43;
            stan::model::assign(log_probs,
              (stan::math::log(
                 stan::model::rvalue(omegas, "omegas",
                   stan::model::index_uni(h))) +
                stan::math::normal_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  stan::math::add(
                    stan::math::multiply(
                      stan::model::rvalue(X, "X", stan::model::index_uni(i)),
                      stan::model::rvalue(betas, "betas",
                        stan::model::index_uni(h))),
                    stan::model::rvalue(ws, "ws",
                      stan::model::index_min_max(1, T),
                        stan::model::index_uni(i))), sigma)),
              "assigning variable log_probs", stan::model::index_uni(h));
          }
          current_statement__ = 45;
          lp_accum__.add(stan::math::log_sum_exp(log_probs));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "Model_simulated_data_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double sigma2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double tau2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      tau2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double xi_constructor = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      xi_constructor = in__.template read_constrain_lub<local_scalar_t__, 
                         jacobian__>(0, 1, lp__);
      std::vector<Eigen::Matrix<double, -1, 1>> betas =
         std::vector<Eigen::Matrix<double, -1, 1>>(H, 
           Eigen::Matrix<double, -1, 1>::Constant(betas_2dim__,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      betas = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(H,
                betas_2dim__);
      Eigen::Matrix<double, -1, 1> vs =
         Eigen::Matrix<double, -1, 1>::Constant(vs_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      vs = in__.template read_constrain_lub<
             Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
             vs_1dim__);
      std::vector<Eigen::Matrix<double, -1, 1>> w_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(T, 
           Eigen::Matrix<double, -1, 1>::Constant(I,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      w_raw = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(T, I);
      Eigen::Matrix<double, -1, 1> omegas =
         Eigen::Matrix<double, -1, 1>::Constant(H,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cumprod_one_mv =
         Eigen::Matrix<double, -1, 1>::Constant(cumprod_one_mv_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      double xi = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, -1> ws_tmp =
         Eigen::Matrix<double, -1, -1>::Constant(I, T,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> ws =
         Eigen::Matrix<double, -1, -1>::Constant(T, I,
           std::numeric_limits<double>::quiet_NaN());
      double sigma = std::numeric_limits<double>::quiet_NaN();
      double tau = std::numeric_limits<double>::quiet_NaN();
      out__.write(alpha);
      out__.write(sigma2);
      out__.write(tau2);
      out__.write(xi_constructor);
      for (int sym1__ = 1; sym1__ <= betas_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
          out__.write(betas[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(vs);
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          out__.write(w_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      stan::model::assign(cumprod_one_mv,
        stan::math::exp(stan::math::cumulative_sum(stan::math::log1m(vs))),
        "assigning variable cumprod_one_mv");
      current_statement__ = 16;
      stan::model::assign(omegas,
        stan::model::rvalue(vs, "vs", stan::model::index_uni(1)),
        "assigning variable omegas", stan::model::index_uni(1));
      current_statement__ = 17;
      stan::model::assign(omegas,
        stan::math::elt_multiply(
          stan::model::rvalue(vs, "vs",
            stan::model::index_min_max(2, (H - 1))),
          stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
            stan::model::index_min_max(1, (H - 2)))),
        "assigning variable omegas", stan::model::index_min_max(2, (H - 1)));
      current_statement__ = 18;
      stan::model::assign(omegas,
        stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
          stan::model::index_uni((H - 1))),
        "assigning variable omegas", stan::model::index_uni(H));
      current_statement__ = 10;
      xi = ((2 * xi_constructor) - 1);
      current_statement__ = 19;
      stan::model::assign(ws_tmp,
        stan::math::add(mu_w_1,
          stan::math::multiply(L,
            stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(1)))),
        "assigning variable ws_tmp", stan::model::index_min_max(1, I),
                                       stan::model::index_uni(1));
      current_statement__ = 21;
      for (int t = 2; t <= T; ++t) {
        current_statement__ = 20;
        stan::model::assign(ws_tmp,
          stan::math::add(
            stan::math::multiply(
              stan::model::deep_copy(
                stan::model::rvalue(ws_tmp, "ws_tmp",
                  stan::model::index_min_max(1, I),
                    stan::model::index_uni((t - 1)))), xi),
            stan::math::multiply(L,
              stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(t)))),
          "assigning variable ws_tmp", stan::model::index_min_max(1, I),
                                         stan::model::index_uni(t));
      }
      current_statement__ = 12;
      stan::model::assign(ws, stan::math::transpose(ws_tmp),
        "assigning variable ws");
      current_statement__ = 13;
      sigma = stan::math::sqrt(sigma2);
      current_statement__ = 14;
      tau = stan::math::sqrt(tau2);
      current_statement__ = 8;
      stan::math::check_simplex(function__, "omegas", omegas);
      if (emit_transformed_parameters__) {
        out__.write(omegas);
        out__.write(cumprod_one_mv);
        out__.write(xi);
        out__.write(ws_tmp);
        out__.write(ws);
        out__.write(sigma);
        out__.write(tau);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> s =
         Eigen::Matrix<double, -1, 1>::Constant(I,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(I,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, -1, 1>> log_probs =
         std::vector<Eigen::Matrix<double, -1, 1>>(I, 
           Eigen::Matrix<double, -1, 1>::Constant(H,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 30;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 26;
        for (int h = 1; h <= H; ++h) {
          current_statement__ = 25;
          stan::model::assign(log_probs,
            (stan::math::log(
               stan::model::rvalue(omegas, "omegas",
                 stan::model::index_uni(h))) +
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                stan::math::add(
                  stan::math::multiply(
                    stan::model::rvalue(X, "X", stan::model::index_uni(i)),
                    stan::model::rvalue(betas, "betas",
                      stan::model::index_uni(h))),
                  stan::model::rvalue(ws, "ws",
                    stan::model::index_min_max(1, T),
                      stan::model::index_uni(i))), sigma)),
            "assigning variable log_probs", stan::model::index_uni(i),
                                              stan::model::index_uni(h));
        }
        current_statement__ = 27;
        stan::model::assign(s,
          stan::math::categorical_rng(
            stan::math::softmax(
              stan::model::rvalue(log_probs, "log_probs",
                stan::model::index_uni(i))), base_rng__),
          "assigning variable s", stan::model::index_uni(i));
        current_statement__ = 28;
        stan::model::assign(log_lik,
          stan::math::log_sum_exp(
            stan::model::rvalue(log_probs, "log_probs",
              stan::model::index_uni(i))),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      out__.write(s);
      out__.write(log_lik);
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          out__.write(log_probs[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      sigma2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2);
      local_scalar_t__ tau2 = DUMMY_VAR__;
      tau2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau2);
      local_scalar_t__ xi_constructor = DUMMY_VAR__;
      xi_constructor = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, xi_constructor);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> betas =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(H, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(betas_2dim__,
             DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= betas_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
          stan::model::assign(betas, in__.read<local_scalar_t__>(),
            "assigning variable betas", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
        }
      }
      out__.write(betas);
      Eigen::Matrix<local_scalar_t__, -1, 1> vs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(vs_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= vs_1dim__; ++sym1__) {
        stan::model::assign(vs, in__.read<local_scalar_t__>(),
          "assigning variable vs", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, vs);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> w_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(T, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          stan::model::assign(w_raw, in__.read<local_scalar_t__>(),
            "assigning variable w_raw", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
        }
      }
      out__.write(w_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "sigma2", "tau2",
      "xi_constructor", "betas", "vs", "w_raw", "omegas", "cumprod_one_mv",
      "xi", "ws_tmp", "ws", "sigma", "tau", "s", "log_lik", "log_probs"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      },
      std::vector<size_t>{static_cast<size_t>(H),
                          static_cast<size_t>(betas_2dim__)},
      std::vector<size_t>{static_cast<size_t>(vs_1dim__)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(H)},
      std::vector<size_t>{static_cast<size_t>(cumprod_one_mv_1dim__)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(T)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(I)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(H)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "tau2");
    param_names__.emplace_back(std::string() + "xi_constructor");
    for (int sym1__ = 1; sym1__ <= betas_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= vs_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vs" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "w_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omegas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= cumprod_one_mv_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumprod_one_mv" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "xi");
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ws_tmp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "tau");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "s" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_probs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "tau2");
    param_names__.emplace_back(std::string() + "xi_constructor");
    for (int sym1__ = 1; sym1__ <= betas_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= vs_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vs" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "w_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= (H - 1); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omegas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= cumprod_one_mv_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumprod_one_mv" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "xi");
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ws_tmp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "tau");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "s" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_probs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_constructor\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"betas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(H) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(betas_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"vs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(vs_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"w_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "}},\"block\":\"parameters\"},{\"name\":\"omegas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cumprod_one_mv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cumprod_one_mv_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ws_tmp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_probs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_constructor\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"betas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(H) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(betas_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"vs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(vs_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"w_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "}},\"block\":\"parameters\"},{\"name\":\"omegas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((H - 1)) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cumprod_one_mv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cumprod_one_mv_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ws_tmp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_probs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + 1) + (H * betas_2dim__)) + vs_1dim__) + (T * I));
      const size_t num_transformed = 
  ((((((H + cumprod_one_mv_1dim__) + 1) + (I * T)) + (T * I)) + 1) + 1);
      const size_t num_gen_quantities = 
  ((I + I) + (I * H));
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + 1) + (H * betas_2dim__)) + vs_1dim__) + (T * I));
      const size_t num_transformed = 
  ((((((H + cumprod_one_mv_1dim__) + 1) + (I * T)) + (T * I)) + 1) + 1);
      const size_t num_gen_quantities = 
  ((I + I) + (I * H));
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"alpha", "sigma2", "tau2",
      "xi_constructor", "betas", "vs", "w_raw"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{1, 1, 
       1, 1, (H * betas_2dim__), vs_1dim__, (T * I)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = Model_simulated_data_model_namespace::Model_simulated_data_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return Model_simulated_data_model_namespace::profiles__;
}

#endif


