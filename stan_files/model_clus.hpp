
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace model_clus_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 82> locations_array__ = 
{" (found before start of program)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 58, column 4 to column 25)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 59, column 4 to column 23)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 60, column 4 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 61, column 4 to column 27)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 64, column 4 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 67, column 4 to column 31)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 70, column 4 to column 29)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 77, column 4 to column 38)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 84, column 4 to column 33)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 87, column 4 to column 30)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 88, column 4 to column 26)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 89, column 4 to column 34)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 79, column 4 to column 41)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 82, column 8 to column 56)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 81, column 4 to line 82, column 56)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 117, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 120, column 8 to column 26)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 121, column 8 to column 79)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 119, column 19 to line 122, column 5)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 119, column 4 to line 122, column 5)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 95, column 4 to column 42)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 96, column 4 to column 38)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 97, column 4 to column 49)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 98, column 4 to column 38)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 101, column 8 to column 34)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 100, column 4 to line 101, column 34)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 103, column 4 to column 32)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 106, column 8 to column 41)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 105, column 4 to line 106, column 41)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 109, column 8 to column 24)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 110, column 8 to column 61)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 108, column 19 to line 111, column 5)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 108, column 4 to line 111, column 5)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 4, column 4 to column 10)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 5, column 4 to column 10)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 6, column 4 to column 10)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 7, column 4 to column 10)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 9, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 9, column 20 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 9, column 4 to column 25)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 10, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 10, column 20 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 10, column 22 to column 25)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 10, column 4 to column 29)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 13, column 11 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 13, column 4 to column 26)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 14, column 4 to column 25)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 15, column 4 to column 27)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 16, column 4 to column 27)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 19, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 19, column 4 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 22, column 4 to column 17)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 23, column 4 to column 17)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 26, column 4 to column 16)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 27, column 4 to column 16)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 30, column 4 to column 18)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 31, column 4 to column 18)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 34, column 4 to column 13)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 37, column 4 to column 15)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 38, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 41, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 41, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 41, column 4 to column 22)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 44, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 44, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 48, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 48, column 14 to column 15)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 48, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 49, column 4 to column 34)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 51, column 4 to column 36)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 52, column 4 to column 34)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 60, column 11 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 67, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 67, column 20 to column 23)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 70, column 10 to column 11)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 70, column 20 to column 21)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 77, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 77, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 84, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 84, column 13 to column 14)",
 " (in '/home/daan/bayesian-project/stan_files/model_clus.stan', line 117, column 11 to column 12)"};




class model_clus_model final : public model_base_crtp<model_clus_model> {

 private:
  int I;
  int T;
  int P;
  int N;
  std::vector<Eigen::Matrix<double, -1, 1>> y;
  std::vector<Eigen::Matrix<double, -1, -1>> X;
  Eigen::Matrix<double, -1, 1> mu_0_mean__;
  double mu_0_var;
  double a_sigma2_0;
  double b_sigma2_0;
  Eigen::Matrix<double, -1, 1> mu_w_1__;
  double a_alpha;
  double b_alpha;
  double a_tau2;
  double b_tau2;
  double a_sigma2;
  double b_sigma2;
  double rho;
  double mu_xi;
  double sigma2_xi;
  Eigen::Matrix<double, -1, -1> inv_Q__;
  std::vector<int> s;
  Eigen::Matrix<double, -1, -1> L__;
  double sigma_xi;
  double mu_0_sd;
  int mu_0_1dim__;
  int betas_2dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mu_0_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mu_w_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> inv_Q{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> L{nullptr, 0, 0};
 
 public:
  ~model_clus_model() { }
  
  inline std::string model_name() const final { return "model_clus_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  model_clus_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model_clus_model_namespace::model_clus_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 34;
      context__.validate_dims("data initialization","I","int",
           std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      
      
      current_statement__ = 34;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 35;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 35;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 36;
      context__.validate_dims("data initialization","P","int",
           std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      
      
      current_statement__ = 36;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 37;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 37;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 38;
      stan::math::validate_non_negative_index("y", "I", I);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("y", "T", T);
      current_statement__ = 40;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(T)});
      y = 
        std::vector<Eigen::Matrix<double, -1, 1>>(I, 
          Eigen::Matrix<double, -1, 1>::Constant(T,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 40;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 40;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 40;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 40;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 41;
      stan::math::validate_non_negative_index("X", "I", I);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("X", "T", T);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("X", "P + 1", (P + 1));
      current_statement__ = 44;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(T), static_cast<size_t>((P + 1))});
      X = 
        std::vector<Eigen::Matrix<double, -1, -1>>(I, 
          Eigen::Matrix<double, -1, -1>::Constant(T, (P + 1),
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 44;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 44;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 44;
            for (int sym3__ = 1; sym3__ <= I; ++sym3__) {
              current_statement__ = 44;
              stan::model::assign(X, X_flat__[(pos__ - 1)],
                "assigning variable X", stan::model::index_uni(sym3__),
                                          stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
              current_statement__ = 44;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 45;
      stan::math::validate_non_negative_index("mu_0_mean", "P + 1", (P + 1));
      current_statement__ = 46;
      context__.validate_dims("data initialization","mu_0_mean","double",
           std::vector<size_t>{static_cast<size_t>((P + 1))});
      mu_0_mean__ = 
        Eigen::Matrix<double, -1, 1>::Constant((P + 1),
          std::numeric_limits<double>::quiet_NaN());
      new (&mu_0_mean) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mu_0_mean__.data(), 
        (P + 1));
      
      {
        std::vector<local_scalar_t__> mu_0_mean_flat__;
        current_statement__ = 46;
        mu_0_mean_flat__ = context__.vals_r("mu_0_mean");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= (P + 1); ++sym1__) {
          current_statement__ = 46;
          stan::model::assign(mu_0_mean, mu_0_mean_flat__[(pos__ - 1)],
            "assigning variable mu_0_mean", stan::model::index_uni(sym1__));
          current_statement__ = 46;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 47;
      context__.validate_dims("data initialization","mu_0_var","double",
           std::vector<size_t>{});
      mu_0_var = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 47;
      mu_0_var = context__.vals_r("mu_0_var")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization","a_sigma2_0","double",
           std::vector<size_t>{});
      a_sigma2_0 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 48;
      a_sigma2_0 = context__.vals_r("a_sigma2_0")[(1 - 1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization","b_sigma2_0","double",
           std::vector<size_t>{});
      b_sigma2_0 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 49;
      b_sigma2_0 = context__.vals_r("b_sigma2_0")[(1 - 1)];
      current_statement__ = 50;
      stan::math::validate_non_negative_index("mu_w_1", "I", I);
      current_statement__ = 51;
      context__.validate_dims("data initialization","mu_w_1","double",
           std::vector<size_t>{static_cast<size_t>(I)});
      mu_w_1__ = 
        Eigen::Matrix<double, -1, 1>::Constant(I,
          std::numeric_limits<double>::quiet_NaN());
      new (&mu_w_1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mu_w_1__.data(), I);
        
      
      {
        std::vector<local_scalar_t__> mu_w_1_flat__;
        current_statement__ = 51;
        mu_w_1_flat__ = context__.vals_r("mu_w_1");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 51;
          stan::model::assign(mu_w_1, mu_w_1_flat__[(pos__ - 1)],
            "assigning variable mu_w_1", stan::model::index_uni(sym1__));
          current_statement__ = 51;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 52;
      context__.validate_dims("data initialization","a_alpha","double",
           std::vector<size_t>{});
      a_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 52;
      a_alpha = context__.vals_r("a_alpha")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization","b_alpha","double",
           std::vector<size_t>{});
      b_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 53;
      b_alpha = context__.vals_r("b_alpha")[(1 - 1)];
      current_statement__ = 54;
      context__.validate_dims("data initialization","a_tau2","double",
           std::vector<size_t>{});
      a_tau2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 54;
      a_tau2 = context__.vals_r("a_tau2")[(1 - 1)];
      current_statement__ = 55;
      context__.validate_dims("data initialization","b_tau2","double",
           std::vector<size_t>{});
      b_tau2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 55;
      b_tau2 = context__.vals_r("b_tau2")[(1 - 1)];
      current_statement__ = 56;
      context__.validate_dims("data initialization","a_sigma2","double",
           std::vector<size_t>{});
      a_sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 56;
      a_sigma2 = context__.vals_r("a_sigma2")[(1 - 1)];
      current_statement__ = 57;
      context__.validate_dims("data initialization","b_sigma2","double",
           std::vector<size_t>{});
      b_sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 57;
      b_sigma2 = context__.vals_r("b_sigma2")[(1 - 1)];
      current_statement__ = 58;
      context__.validate_dims("data initialization","rho","double",
           std::vector<size_t>{});
      rho = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 58;
      rho = context__.vals_r("rho")[(1 - 1)];
      current_statement__ = 59;
      context__.validate_dims("data initialization","mu_xi","double",
           std::vector<size_t>{});
      mu_xi = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 59;
      mu_xi = context__.vals_r("mu_xi")[(1 - 1)];
      current_statement__ = 60;
      context__.validate_dims("data initialization","sigma2_xi","double",
           std::vector<size_t>{});
      sigma2_xi = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 60;
      sigma2_xi = context__.vals_r("sigma2_xi")[(1 - 1)];
      current_statement__ = 61;
      stan::math::validate_non_negative_index("inv_Q", "I", I);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("inv_Q", "I", I);
      current_statement__ = 63;
      context__.validate_dims("data initialization","inv_Q","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(I)});
      inv_Q__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&inv_Q) Eigen::Map<Eigen::Matrix<double, -1, -1>>(inv_Q__.data(), I, I);
        
      
      {
        std::vector<local_scalar_t__> inv_Q_flat__;
        current_statement__ = 63;
        inv_Q_flat__ = context__.vals_r("inv_Q");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 63;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 63;
            stan::model::assign(inv_Q, inv_Q_flat__[(pos__ - 1)],
              "assigning variable inv_Q", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 63;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 64;
      stan::math::validate_non_negative_index("s", "I", I);
      current_statement__ = 65;
      context__.validate_dims("data initialization","s","int",
           std::vector<size_t>{static_cast<size_t>(I)});
      s = std::vector<int>(I, std::numeric_limits<int>::min());
      
      
      current_statement__ = 65;
      s = context__.vals_i("s");
      current_statement__ = 66;
      stan::math::validate_non_negative_index("L", "I", I);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("L", "I", I);
      current_statement__ = 68;
      L__ = 
        Eigen::Matrix<double, -1, -1>::Constant(I, I,
          std::numeric_limits<double>::quiet_NaN());
      new (&L) Eigen::Map<Eigen::Matrix<double, -1, -1>>(L__.data(), I, I);
      
      current_statement__ = 69;
      stan::model::assign(L, stan::math::cholesky_decompose(inv_Q),
        "assigning variable L");
      current_statement__ = 70;
      sigma_xi = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 70;
      sigma_xi = stan::math::sqrt(sigma2_xi);
      current_statement__ = 71;
      mu_0_sd = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 71;
      mu_0_sd = stan::math::sqrt(mu_0_var);
      current_statement__ = 72;
      mu_0_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 72;
      mu_0_1dim__ = (P + 1);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("mu_0", "P + 1", mu_0_1dim__);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("betas", "N", N);
      current_statement__ = 74;
      betas_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 74;
      betas_2dim__ = (P + 1);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("betas", "P + 1", betas_2dim__);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("w_raw", "T", T);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("w_raw", "I", I);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("ws_tmp", "I", I);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("ws_tmp", "T", T);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("ws", "T", T);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("ws", "I", I);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("log_lik", "I", I);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + mu_0_1dim__ + 1 + 1 + (N * betas_2dim__)
       + (T * I);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_clus_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 1;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ tau2 = DUMMY_VAR__;
      current_statement__ = 2;
      tau2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_0 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(mu_0_1dim__,
           DUMMY_VAR__);
      current_statement__ = 3;
      mu_0 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               mu_0_1dim__);
      local_scalar_t__ sigma2_0 = DUMMY_VAR__;
      current_statement__ = 4;
      sigma2_0 = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      local_scalar_t__ xi = DUMMY_VAR__;
      current_statement__ = 5;
      xi = in__.template read<local_scalar_t__>();
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> betas =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(betas_2dim__,
             DUMMY_VAR__));
      current_statement__ = 6;
      betas = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N,
                betas_2dim__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> w_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(T, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__));
      current_statement__ = 7;
      w_raw = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(T, I);
      Eigen::Matrix<local_scalar_t__, -1, -1> ws_tmp =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(I, T, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(ws_tmp,
        stan::math::add(mu_w_1,
          stan::math::multiply(L,
            stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(1)))),
        "assigning variable ws_tmp", stan::model::index_min_max(1, I),
                                       stan::model::index_uni(1));
      current_statement__ = 15;
      for (int t = 2; t <= T; ++t) {
        current_statement__ = 14;
        stan::model::assign(ws_tmp,
          stan::math::add(
            stan::math::multiply(
              stan::model::deep_copy(
                stan::model::rvalue(ws_tmp, "ws_tmp",
                  stan::model::index_min_max(1, I),
                    stan::model::index_uni((t - 1)))), xi),
            stan::math::multiply(L,
              stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(t)))),
          "assigning variable ws_tmp", stan::model::index_min_max(1, I),
                                         stan::model::index_uni(t));
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> ws =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T, I, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(ws, stan::math::transpose(ws_tmp),
        "assigning variable ws");
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 10;
      sigma = stan::math::sqrt(sigma2);
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 11;
      tau = stan::math::sqrt(tau2);
      local_scalar_t__ sigma_0 = DUMMY_VAR__;
      current_statement__ = 12;
      sigma_0 = stan::math::sqrt(sigma2_0);
      {
        current_statement__ = 21;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma2, a_sigma2, b_sigma2));
        current_statement__ = 22;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(tau2, a_tau2, b_tau2));
        current_statement__ = 23;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma2_0, a_sigma2_0,
            b_sigma2_0));
        current_statement__ = 24;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_0, mu_0_mean, mu_0_sd));
        current_statement__ = 26;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 25;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(t)),
              0, tau));
        }
        current_statement__ = 27;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(xi, mu_xi, sigma_xi));
        current_statement__ = 29;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 28;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(betas, "betas", stan::model::index_uni(n)),
              mu_0, sigma_0));
        }
        current_statement__ = 33;
        for (int i = 1; i <= I; ++i) {
          int clus_i = std::numeric_limits<int>::min();
          current_statement__ = 30;
          clus_i = stan::model::rvalue(s, "s", stan::model::index_uni(i));
          current_statement__ = 31;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(y, "y", stan::model::index_uni(i)),
              stan::math::add(
                stan::math::multiply(
                  stan::model::rvalue(X, "X", stan::model::index_uni(i)),
                  stan::model::rvalue(betas, "betas",
                    stan::model::index_uni(clus_i))),
                stan::model::rvalue(ws, "ws",
                  stan::model::index_min_max(1, T), stan::model::index_uni(i))),
              sigma));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_clus_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double sigma2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double tau2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      tau2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<double, -1, 1> mu_0 =
         Eigen::Matrix<double, -1, 1>::Constant(mu_0_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      mu_0 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               mu_0_1dim__);
      double sigma2_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma2_0 = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      double xi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      xi = in__.template read<local_scalar_t__>();
      std::vector<Eigen::Matrix<double, -1, 1>> betas =
         std::vector<Eigen::Matrix<double, -1, 1>>(N, 
           Eigen::Matrix<double, -1, 1>::Constant(betas_2dim__,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      betas = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N,
                betas_2dim__);
      std::vector<Eigen::Matrix<double, -1, 1>> w_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(T, 
           Eigen::Matrix<double, -1, 1>::Constant(I,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      w_raw = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(T, I);
      Eigen::Matrix<double, -1, -1> ws_tmp =
         Eigen::Matrix<double, -1, -1>::Constant(I, T,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> ws =
         Eigen::Matrix<double, -1, -1>::Constant(T, I,
           std::numeric_limits<double>::quiet_NaN());
      double sigma = std::numeric_limits<double>::quiet_NaN();
      double tau = std::numeric_limits<double>::quiet_NaN();
      double sigma_0 = std::numeric_limits<double>::quiet_NaN();
      out__.write(sigma2);
      out__.write(tau2);
      out__.write(mu_0);
      out__.write(sigma2_0);
      out__.write(xi);
      for (int sym1__ = 1; sym1__ <= betas_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(betas[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          out__.write(w_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      stan::model::assign(ws_tmp,
        stan::math::add(mu_w_1,
          stan::math::multiply(L,
            stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(1)))),
        "assigning variable ws_tmp", stan::model::index_min_max(1, I),
                                       stan::model::index_uni(1));
      current_statement__ = 15;
      for (int t = 2; t <= T; ++t) {
        current_statement__ = 14;
        stan::model::assign(ws_tmp,
          stan::math::add(
            stan::math::multiply(
              stan::model::deep_copy(
                stan::model::rvalue(ws_tmp, "ws_tmp",
                  stan::model::index_min_max(1, I),
                    stan::model::index_uni((t - 1)))), xi),
            stan::math::multiply(L,
              stan::model::rvalue(w_raw, "w_raw", stan::model::index_uni(t)))),
          "assigning variable ws_tmp", stan::model::index_min_max(1, I),
                                         stan::model::index_uni(t));
      }
      current_statement__ = 9;
      stan::model::assign(ws, stan::math::transpose(ws_tmp),
        "assigning variable ws");
      current_statement__ = 10;
      sigma = stan::math::sqrt(sigma2);
      current_statement__ = 11;
      tau = stan::math::sqrt(tau2);
      current_statement__ = 12;
      sigma_0 = stan::math::sqrt(sigma2_0);
      if (emit_transformed_parameters__) {
        out__.write(ws_tmp);
        out__.write(ws);
        out__.write(sigma);
        out__.write(tau);
        out__.write(sigma_0);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(I,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      for (int i = 1; i <= I; ++i) {
        int clus_i = std::numeric_limits<int>::min();
        current_statement__ = 17;
        clus_i = stan::model::rvalue(s, "s", stan::model::index_uni(i));
        current_statement__ = 18;
        stan::model::assign(log_lik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(i)),
            stan::math::add(
              stan::math::multiply(
                stan::model::rvalue(X, "X", stan::model::index_uni(i)),
                stan::model::rvalue(betas, "betas",
                  stan::model::index_uni(clus_i))),
              stan::model::rvalue(ws, "ws",
                stan::model::index_min_max(1, T), stan::model::index_uni(i))),
            sigma), "assigning variable log_lik", stan::model::index_uni(i));
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      sigma2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2);
      local_scalar_t__ tau2 = DUMMY_VAR__;
      tau2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau2);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_0 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(mu_0_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= mu_0_1dim__; ++sym1__) {
        stan::model::assign(mu_0, in__.read<local_scalar_t__>(),
          "assigning variable mu_0", stan::model::index_uni(sym1__));
      }
      out__.write(mu_0);
      local_scalar_t__ sigma2_0 = DUMMY_VAR__;
      sigma2_0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2_0);
      local_scalar_t__ xi = DUMMY_VAR__;
      xi = in__.read<local_scalar_t__>();
      out__.write(xi);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> betas =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(betas_2dim__,
             DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= betas_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          stan::model::assign(betas, in__.read<local_scalar_t__>(),
            "assigning variable betas", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
        }
      }
      out__.write(betas);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> w_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(T, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          stan::model::assign(w_raw, in__.read<local_scalar_t__>(),
            "assigning variable w_raw", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
        }
      }
      out__.write(w_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"sigma2", "tau2", "mu_0", "sigma2_0",
      "xi", "betas", "w_raw", "ws_tmp", "ws", "sigma", "tau", "sigma_0",
      "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(mu_0_1dim__)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N),
                          static_cast<size_t>(betas_2dim__)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(T)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(I)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(I)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "tau2");
    for (int sym1__ = 1; sym1__ <= mu_0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_0" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma2_0");
    param_names__.emplace_back(std::string() + "xi");
    for (int sym1__ = 1; sym1__ <= betas_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "w_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ws_tmp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "tau");
      param_names__.emplace_back(std::string() + "sigma_0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "tau2");
    for (int sym1__ = 1; sym1__ <= mu_0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_0" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma2_0");
    param_names__.emplace_back(std::string() + "xi");
    for (int sym1__ = 1; sym1__ <= betas_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "w_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ws_tmp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "tau");
      param_names__.emplace_back(std::string() + "sigma_0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_0_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma2_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"betas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(betas_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"w_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "}},\"block\":\"parameters\"},{\"name\":\"ws_tmp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_0_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma2_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"betas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(betas_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"w_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "}},\"block\":\"parameters\"},{\"name\":\"ws_tmp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(I) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + mu_0_1dim__) + 1) + 1) + (N * betas_2dim__)) + (T * I));
      const size_t num_transformed = 
  (((((I * T) + (T * I)) + 1) + 1) + 1);
      const size_t num_gen_quantities = I;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + mu_0_1dim__) + 1) + 1) + (N * betas_2dim__)) + (T * I));
      const size_t num_transformed = 
  (((((I * T) + (T * I)) + 1) + 1) + 1);
      const size_t num_gen_quantities = I;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"sigma2", "tau2", "mu_0",
      "sigma2_0", "xi", "betas", "w_raw"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{1, 1,
       mu_0_1dim__, 1, 1, (N * betas_2dim__), (T * I)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = model_clus_model_namespace::model_clus_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model_clus_model_namespace::profiles__;
}

#endif


