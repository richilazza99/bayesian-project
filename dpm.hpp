
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace dpm_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 60> locations_array__ = 
{" (found before start of program)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 21, column 4 to column 20)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 22, column 4 to column 28)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 24, column 4 to column 38)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 28, column 4 to column 30)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 30, column 4 to column 18)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 32, column 4 to column 49)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 33, column 4 to column 53)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 35, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 36, column 4 to column 58)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 37, column 4 to column 32)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 55, column 4 to column 26)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 58, column 15 to column 16)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 58, column 8 to column 29)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 60, column 12 to column 78)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 59, column 23 to line 61, column 9)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 59, column 8 to line 61, column 9)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 62, column 8 to column 62)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 57, column 20 to line 63, column 5)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 57, column 5 to line 63, column 5)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 64, column 4 to column 23)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 67, column 15 to column 16)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 67, column 8 to column 29)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 69, column 12 to column 82)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 68, column 23 to line 70, column 9)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 68, column 8 to line 70, column 9)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 71, column 8 to column 48)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 66, column 24 to line 72, column 5)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 66, column 5 to line 72, column 5)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 41, column 4 to column 24)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 42, column 4 to column 28)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 43, column 4 to column 26)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 46, column 15 to column 16)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 46, column 8 to column 29)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 48, column 12 to column 78)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 47, column 23 to line 49, column 9)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 47, column 8 to line 49, column 9)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 50, column 8 to column 42)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 45, column 19 to line 51, column 5)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 45, column 4 to line 51, column 5)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 4, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 5, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 5, column 4 to column 16)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 7, column 4 to column 24)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 8, column 4 to column 13)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 9, column 4 to column 21)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 11, column 4 to column 20)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 12, column 4 to column 20)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 14, column 4 to column 19)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 16, column 4 to column 23)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 17, column 11 to column 16)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 17, column 4 to column 24)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 21, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 22, column 20 to column 21)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 24, column 29 to column 32)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 28, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 30, column 12 to column 13)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 32, column 29 to column 32)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 55, column 11 to column 12)",
 " (in '/home/daan/bayesian-project/dpm.stan', line 64, column 11 to column 16)"};




class dpm_model final : public model_base_crtp<dpm_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> y__;
  double alpha;
  double mu0;
  double s0;
  double a;
  double b;
  int H;
  int ngrid;
  Eigen::Matrix<double, -1, 1> xgrid__;
  int nus_1dim__;
  int cumprod_one_mv_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> xgrid{nullptr, 0};
 
 public:
  ~dpm_model() { }
  
  inline std::string model_name() const final { return "dpm_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  dpm_model(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "dpm_model_namespace::dpm_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 40;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 42;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 42;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 42;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 43;
      context__.validate_dims("data initialization","alpha","double",
           std::vector<size_t>{});
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 43;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization","mu0","double",
           std::vector<size_t>{});
      mu0 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 44;
      mu0 = context__.vals_r("mu0")[(1 - 1)];
      current_statement__ = 45;
      context__.validate_dims("data initialization","s0","double",
           std::vector<size_t>{});
      s0 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 45;
      s0 = context__.vals_r("s0")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "s0", s0, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization","a","double",
           std::vector<size_t>{});
      a = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 46;
      a = context__.vals_r("a")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "a", a, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization","b","double",
           std::vector<size_t>{});
      b = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 47;
      b = context__.vals_r("b")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "b", b, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization","H","int",
           std::vector<size_t>{});
      H = std::numeric_limits<int>::min();
      
      
      current_statement__ = 48;
      H = context__.vals_i("H")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "H", H, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization","ngrid","int",
           std::vector<size_t>{});
      ngrid = std::numeric_limits<int>::min();
      
      
      current_statement__ = 49;
      ngrid = context__.vals_i("ngrid")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "ngrid", ngrid, 1);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("xgrid", "ngrid", ngrid);
      current_statement__ = 51;
      context__.validate_dims("data initialization","xgrid","double",
           std::vector<size_t>{static_cast<size_t>(ngrid)});
      xgrid__ = 
        Eigen::Matrix<double, -1, 1>::Constant(ngrid,
          std::numeric_limits<double>::quiet_NaN());
      new (&xgrid) Eigen::Map<Eigen::Matrix<double, -1, 1>>(xgrid__.data(), ngrid);
        
      
      {
        std::vector<local_scalar_t__> xgrid_flat__;
        current_statement__ = 51;
        xgrid_flat__ = context__.vals_r("xgrid");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= ngrid; ++sym1__) {
          current_statement__ = 51;
          stan::model::assign(xgrid, xgrid_flat__[(pos__ - 1)],
            "assigning variable xgrid", stan::model::index_uni(sym1__));
          current_statement__ = 51;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 52;
      stan::math::validate_non_negative_index("means", "H", H);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("vars", "H", H);
      current_statement__ = 54;
      nus_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 54;
      nus_1dim__ = (H - 1);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("nus", "H - 1", nus_1dim__);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("sds", "H", H);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("ws", "H", H);
      current_statement__ = 57;
      cumprod_one_mv_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 57;
      cumprod_one_mv_1dim__ = (H - 1);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("cumprod_one_mv", "H - 1",
                                              cumprod_one_mv_1dim__);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("clus_allocs", "N", N);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("dens", "ngrid", ngrid);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = H + H + nus_1dim__;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "dpm_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> means =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      current_statement__ = 1;
      means = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(H);
      Eigen::Matrix<local_scalar_t__, -1, 1> vars =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      current_statement__ = 2;
      vars = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
               H);
      Eigen::Matrix<local_scalar_t__, -1, 1> nus =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nus_1dim__,
           DUMMY_VAR__);
      current_statement__ = 3;
      nus = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
              nus_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sds =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(sds, stan::math::sqrt(vars),
        "assigning variable sds");
      Eigen::Matrix<local_scalar_t__, -1, 1> ws =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> cumprod_one_mv =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           cumprod_one_mv_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(cumprod_one_mv,
        stan::math::exp(stan::math::cumulative_sum(stan::math::log1m(nus))),
        "assigning variable cumprod_one_mv");
      current_statement__ = 8;
      stan::model::assign(ws,
        stan::model::rvalue(nus, "nus", stan::model::index_uni(1)),
        "assigning variable ws", stan::model::index_uni(1));
      current_statement__ = 9;
      stan::model::assign(ws,
        stan::math::elt_multiply(
          stan::model::rvalue(nus, "nus",
            stan::model::index_min_max(2, (H - 1))),
          stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
            stan::model::index_min_max(1, (H - 2)))),
        "assigning variable ws", stan::model::index_min_max(2, (H - 1)));
      current_statement__ = 10;
      stan::model::assign(ws,
        stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
          stan::model::index_uni((H - 1))),
        "assigning variable ws", stan::model::index_uni(H));
      current_statement__ = 5;
      stan::math::check_simplex(function__, "ws", ws);
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "cumprod_one_mv",
                                            cumprod_one_mv, 0);
      current_statement__ = 6;
      stan::math::check_less_or_equal(function__, "cumprod_one_mv",
                                         cumprod_one_mv, 1);
      {
        current_statement__ = 29;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(nus, 1, alpha));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(means, mu0, s0));
        current_statement__ = 31;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(vars, a, b));
        current_statement__ = 39;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 32;
          stan::math::validate_non_negative_index("log_probas", "H", H);
          Eigen::Matrix<local_scalar_t__, -1, 1> log_probas =
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
          current_statement__ = 36;
          for (int h = 1; h <= H; ++h) {
            current_statement__ = 34;
            stan::model::assign(log_probas,
              (stan::math::log(
                 stan::model::rvalue(ws, "ws", stan::model::index_uni(h))) +
                stan::math::normal_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  stan::model::rvalue(means, "means",
                    stan::model::index_uni(h)),
                  stan::model::rvalue(sds, "sds", stan::model::index_uni(h)))),
              "assigning variable log_probas", stan::model::index_uni(h));
          }
          current_statement__ = 37;
          lp_accum__.add(stan::math::log_sum_exp(log_probas));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "dpm_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> means =
         Eigen::Matrix<double, -1, 1>::Constant(H,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      means = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(H);
      Eigen::Matrix<double, -1, 1> vars =
         Eigen::Matrix<double, -1, 1>::Constant(H,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      vars = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
               H);
      Eigen::Matrix<double, -1, 1> nus =
         Eigen::Matrix<double, -1, 1>::Constant(nus_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      nus = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
              nus_1dim__);
      Eigen::Matrix<double, -1, 1> sds =
         Eigen::Matrix<double, -1, 1>::Constant(H,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> ws =
         Eigen::Matrix<double, -1, 1>::Constant(H,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cumprod_one_mv =
         Eigen::Matrix<double, -1, 1>::Constant(cumprod_one_mv_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(means);
      out__.write(vars);
      out__.write(nus);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      stan::model::assign(sds, stan::math::sqrt(vars),
        "assigning variable sds");
      current_statement__ = 7;
      stan::model::assign(cumprod_one_mv,
        stan::math::exp(stan::math::cumulative_sum(stan::math::log1m(nus))),
        "assigning variable cumprod_one_mv");
      current_statement__ = 8;
      stan::model::assign(ws,
        stan::model::rvalue(nus, "nus", stan::model::index_uni(1)),
        "assigning variable ws", stan::model::index_uni(1));
      current_statement__ = 9;
      stan::model::assign(ws,
        stan::math::elt_multiply(
          stan::model::rvalue(nus, "nus",
            stan::model::index_min_max(2, (H - 1))),
          stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
            stan::model::index_min_max(1, (H - 2)))),
        "assigning variable ws", stan::model::index_min_max(2, (H - 1)));
      current_statement__ = 10;
      stan::model::assign(ws,
        stan::model::rvalue(cumprod_one_mv, "cumprod_one_mv",
          stan::model::index_uni((H - 1))),
        "assigning variable ws", stan::model::index_uni(H));
      current_statement__ = 5;
      stan::math::check_simplex(function__, "ws", ws);
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "cumprod_one_mv",
                                            cumprod_one_mv, 0);
      current_statement__ = 6;
      stan::math::check_less_or_equal(function__, "cumprod_one_mv",
                                         cumprod_one_mv, 1);
      if (emit_transformed_parameters__) {
        out__.write(sds);
        out__.write(ws);
        out__.write(cumprod_one_mv);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> clus_allocs =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 12;
        stan::math::validate_non_negative_index("log_probas", "H", H);
        Eigen::Matrix<double, -1, 1> log_probas =
           Eigen::Matrix<double, -1, 1>::Constant(H,
             std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 16;
        for (int h = 1; h <= H; ++h) {
          current_statement__ = 14;
          stan::model::assign(log_probas,
            (stan::math::log(
               stan::model::rvalue(ws, "ws", stan::model::index_uni(h))) +
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                stan::model::rvalue(means, "means",
                  stan::model::index_uni(h)),
                stan::model::rvalue(sds, "sds", stan::model::index_uni(h)))),
            "assigning variable log_probas", stan::model::index_uni(h));
        }
        current_statement__ = 17;
        stan::model::assign(clus_allocs,
          stan::math::categorical_rng(stan::math::softmax(log_probas),
            base_rng__),
          "assigning variable clus_allocs", stan::model::index_uni(i));
      }
      Eigen::Matrix<double, -1, 1> dens =
         Eigen::Matrix<double, -1, 1>::Constant(ngrid,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 28;
      for (int i = 1; i <= ngrid; ++i) {
        current_statement__ = 21;
        stan::math::validate_non_negative_index("log_probas", "H", H);
        Eigen::Matrix<double, -1, 1> log_probas =
           Eigen::Matrix<double, -1, 1>::Constant(H,
             std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 25;
        for (int h = 1; h <= H; ++h) {
          current_statement__ = 23;
          stan::model::assign(log_probas,
            (stan::math::log(
               stan::model::rvalue(ws, "ws", stan::model::index_uni(h))) +
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(xgrid, "xgrid",
                  stan::model::index_uni(i)),
                stan::model::rvalue(means, "means",
                  stan::model::index_uni(h)),
                stan::model::rvalue(sds, "sds", stan::model::index_uni(h)))),
            "assigning variable log_probas", stan::model::index_uni(h));
        }
        current_statement__ = 26;
        stan::model::assign(dens,
          stan::math::exp(stan::math::log_sum_exp(log_probas)),
          "assigning variable dens", stan::model::index_uni(i));
      }
      out__.write(clus_allocs);
      out__.write(dens);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> means =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        stan::model::assign(means, in__.read<local_scalar_t__>(),
          "assigning variable means", stan::model::index_uni(sym1__));
      }
      out__.write(means);
      Eigen::Matrix<local_scalar_t__, -1, 1> vars =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        stan::model::assign(vars, in__.read<local_scalar_t__>(),
          "assigning variable vars", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, vars);
      Eigen::Matrix<local_scalar_t__, -1, 1> nus =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nus_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= nus_1dim__; ++sym1__) {
        stan::model::assign(nus, in__.read<local_scalar_t__>(),
          "assigning variable nus", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, nus);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"means", "vars", "nus", "sds", "ws",
      "cumprod_one_mv", "clus_allocs", "dens"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(H)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(H)},
      std::vector<size_t>{static_cast<size_t>(nus_1dim__)},
      std::vector<size_t>{static_cast<size_t>(H)},
      std::vector<size_t>{static_cast<size_t>(H)},
      std::vector<size_t>{static_cast<size_t>(cumprod_one_mv_1dim__)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(ngrid)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "means" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vars" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nus_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nus" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sds" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= cumprod_one_mv_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumprod_one_mv" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "clus_allocs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= ngrid; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dens" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "means" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vars" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nus_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nus" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sds" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= (H - 1); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ws" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= cumprod_one_mv_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumprod_one_mv" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "clus_allocs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= ngrid; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dens" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"means\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"vars\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"nus\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nus_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sds\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cumprod_one_mv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cumprod_one_mv_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"clus_allocs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"dens\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ngrid) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"means\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"vars\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"nus\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nus_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sds\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((H - 1)) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cumprod_one_mv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cumprod_one_mv_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"clus_allocs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"dens\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ngrid) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((H + H) + nus_1dim__);
      const size_t num_transformed = ((H + H) +
                                                                 cumprod_one_mv_1dim__);
      const size_t num_gen_quantities = 
  (N + ngrid);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((H + H) + nus_1dim__);
      const size_t num_transformed = ((H + H) +
                                                                 cumprod_one_mv_1dim__);
      const size_t num_gen_quantities = 
  (N + ngrid);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"means", "vars", "nus"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{H, H,
       nus_1dim__};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = dpm_model_namespace::dpm_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return dpm_model_namespace::profiles__;
}

#endif


