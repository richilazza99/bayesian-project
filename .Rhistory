setwd("~/GitHub/bayesian-project")
library(maptools)
library(ggplot2)
library(tidyverse)
raw=read.csv('DCIS_FECONDITA1_09122022103658644.csv',header=T)
load.image("QualitativeStudy.RData")
load("QualitativeStudy.RData")
library(spdep)
install.packages("spdep")
View(time.fecondita)
View(time.fecondita)
View(map2.fecondita)
View(map2.fecondita)
View(raw)
coordinate.fecondita=raw[,-c(1,3,5,6,8,9)]
coordinate.fecondita
coordinate.fecondita=coordinate.fecondita[which(coordinate.fecondita$Tipo.dato=="tasso di feconditÃ  totale"),]
View(coordinate.fecondita)
View(coordinate.fecondita)
View(raw)
v
View(data.map.fecondita)
View(data.map.fecondita)
coordinate.fecondita=data.map.fecondita
coordinate.fecondita
View(data.map)
View(data.map)
View(raw)
View(raw)
library(tidyverse)
View(italy_map)
View(italy_map)
View(data.map)
View(data.map)
View(italy_map)
View(italy_map)
dim(distinct(italy_map$region))
coordinates=rep(0,ncol=3,nrow=95)
View(lat.mean)
View(lat.mean)
long.mean=italy_map %>% group_by(region) %>% summarise(long.media=mean(long))
View(long.mean)
View(long.mean)
coordinates=data.frame(lat=lat.mean$lat.media,long=long.mean$long.media,region=lat.mean$region)
dim(distinct(italy_map$region))
coordinates
boundaries <- raster::getData(name = "GADM", country = "ITA", level = 2)
install.packages("raster")
library(raster)
boundaries <- raster::getData(name = "GADM", country = "ITA", level = 2)
# Show data
tm_shape(boundaries) +
tm_polygons()
nb_q <- poly2nb(boundaries)
library(tmap)
install.packages("tmmap")
install.packages("tmap")
library(raster)
library(tmap)
# Show data
tm_shape(boundaries) +
tm_polygons()
nb_q <- poly2nb(boundaries)
library(spdep)
nb_q <- poly2nb(boundaries)
nb_q
nb_q.region.id
attach(nb_q)
summary(nb_q)
nb_q
nb_q$region.id
View(boundaries)
View(boundaries)
# Show the results
plot(boundaries)
plot(nb_q, coords, col="grey", add = TRUE)
plot(nb_q, coordinates, col="grey", add = TRUE)
# Sparse matrix
nb_B <- nb2listw(nb_q, style="B", zero.policy=TRUE)
B <- as(nb_B, "symmetricMatrix")
View(nb_q)
View(nb_q)
names(nb_Q)
names(nb_q)
nb_q[[111]]
nb_q[[110]]
nb_q.class
nb_q.sym
nb_q$sym
nb_q$class
boundaries2 <- raster::getData(name = "alt", country = "ITA", mask=TRUE,level = 2)
nb_q.2 <- poly2nb(boundaries2)
boundaries2 <- raster::getData(name = "GADM", country = "ITA", mask=TRUE,level = 2)
nb_q.2 <- poly2nb(boundaries2)
boundaries2 <- raster::getData(name = "alt", country = "ITA", level = 2)
boundaries@data
nb_q@region.id
print(nb_q)
# Show the results
plot(boundaries)
View(nb_q)
View(nb_q)
View(boundaries@data)
itadata=raster::getData(name = "countries", country = "ITA", level = 2)
nb_q
boundaries
names(boundaries)
names(boundaries$NAME_2)
boundaries$NAME_2
boundaries$NAME_2[62]
list.provinces=boundaries$NAME_2
our.provinces=coordinates$region
intersect(our.provinces,list.provinces)
setdiff(unique(our.provinces,list.provinces))
setdiff(our.provinces,list.provinces)
dim(list.provinces)
length(list.provinces)
list.provinces
unique(raw$Territorio)
############ Provinces Regions ##############
intersect(unique(italy_map$region),unique(raw$Territorio))
intersect(our.provinces,list.provinces)
setdiff(our.provinces,list.provinces)
setdiff(list.provinces,our.provinces)
our.provinces
our.provinces[14]="Bolzano"
our.provinces
our.provinces[30]="Florence"
our.provinces[32]="Forli' - Cesena"
our.provinces[79]="Syracuse"
intersect(our.provinces,list.provinces)
setdiff(our.provinces,list.provinces)
our.provinces[14]="Bolzano"
our.provinces[30]="Florence"
our.provinces[32]="Forli' - Cesena"
our.provinces[46]="Mantua"
our.provinces[47]="Massa Carrara"
our.provinces[56]="Padua"
our.provinces[61]="Pesaro E Urbino"
our.provinces[70]="Reggio Di Calabria"
our.provinces[71]="Reggio Nell'Emilia"
our.provinces[79]="Syracuse"
intersect(our.provinces,list.provinces)
setdiff(list.provinces,our.provinces)
setdiff(our.provinces,list.provinces)
setdiff(list.provinces,our.provinces)
to.delete=setdiff(list.provinces,our.provinces)
boundaries$NAME_2
indeces=rep(0,15)
for (i in 1:15){
name=to.delete[i]
indeces[i]=which(boundaries$NAME_2==name)
}
indeces
nb.matrix=rep(0,110)
nb.matrix=rep(0,110)
for (i in 1:110){
nb.matrix[i]=nb_q[[i]]
}
nb.matrix=matrix(unlist(nb_q),ncol=110,nrow=110)
pippo=nb_q
pippo[[i]]=NULL
pippo=nb_q
for (i in 1:15) {
index=indeces[i]
pippo[[i]]=NULL
}
a=pippo[[3]]
x <- 1:30
x2 <- x[!x %in% 3:10]
for (j in 1:95){
vector=pippo[[j]]
vector=vector[!vector %in% indeces]
pippo[[j]]=vector
}
indeces
boundaries$NAME_2[8]
which[boundaries$NAME_2=="Foggia]"
f
which[boundaries$NAME_2=="Foggia"]
boundaries$NAME_2
which(boundaries$NAME_2=="Foggia")
which(boundaries$NAME_2=="Bolzano")
pippo[[99]]
which(our.privinces=="Bolzano")
which(our.provinces=="Bolzano")
our.provinces
boundaries$NAME_2
length(our.proovinces)
length(our.provinces)
length(boundaries$NAME_2)
to.delete=setdiff(list.provinces,our.provinces)
provinces=boundaries$NAME_2
provinces=provinces[!provinces %in% to.delete]
length(provinces)
which(provinces=="Bolzano")
pippo[[84]]
indices
indeces
provinces=coordinates$region
nb_q
pippo
nb_q$NAME_2
boundaris$NAME_2
boundaries$NAME_2
our.provinces=coordinates$region
install.packages("ape")
library(ape)
pippo=nb_q
indexes=
v
indeces
pippo[[6]]=NULL
length(pippo)
pippo[[14]]=NULL
length(pippo)
pippo[[15]]=NULL
length(pippo)
pippo[[28]]=NULL
pippo[[45]]=NULL
pippo[[45]]=NULL
length(pippo)
pippo[[47]]=NULL
pippo[[52]]=NULL
pippo[[58]]=NULL
pippo[[61]]=NULL
pippo[[63]]=NULL
pippo[[63]]=NULL
pippo[[64]]=NULL
pippo[[64]]=NULL
pippo[[83]]=NULL
length(pippo)
for (j in 1:95){
vector=pippo[[j]]
vector=vector[!vector %in% indeces]
pippo[[j]]=vector
}
nb.matrix=pippo
anna.matrix=rep(0,nrow=95,ncol=95)
anna.matrix=matrix(0,nrow=95,ncol=95)
for (i in 1:95){
vector=pippo[[i]]
for (j in 1:95){
check=j %in% vector
if (check==TRUE){
anna.matrix[i,j]=1
}
}
}
View(anna.matrix)
View(anna.matrix)
pippo[[2]]
diag(anna.matrix)
diag(anna.matrix)=1
View(anna.matrix)
View(anna.matrix)
anna.matrix=matrix(0,nrow=95,ncol=110)
for (i in 1:95){
vector=pippo[[i]]
for (j in 1:110){
check=j %in% vector
if (check==TRUE){
anna.matrix[i,j]=1
}
}
}
View(anna.matrix)
View(anna.matrix)
pippo[[8]]
pippo[[14]]
colnames(anna.matrix)=boundaries$NAME_2
anna.matrix[,6]
nic=anna-matrix
nic=anna.matrix
nic=anna.matrix[,-indeces]
boundaries
dim(nic)
rownames(nic)=colnames(nic)
View(nic)
View(nic)
nic['modena',]
nic[5,]
raw
View(raw)
View(raw)
names(raw$Territorio)
unique>(raw$Territorio)
unique(raw$Territorio)
save.image('QualitativeStudy.RData')
